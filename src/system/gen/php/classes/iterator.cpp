/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/
// @generated by HipHop Compiler

#include <php/classes/arrayaccess.h>
#include <php/classes/iterator.h>
#include <php/classes/splfile.h>
#include <php/globals/constants.h>
#include <runtime/ext/ext.h>
#include <runtime/eval/eval.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

/* preface starts */
/* preface finishes */
/* SRC: classes/iterator.php line 70 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_arrayiterator
Variant c_arrayiterator::os_getInit(const char *s, int64 hash) {
  DECLARE_SYSTEM_GLOBALS(g);
  if (hash < 0) hash = hash_string(s);
  switch (hash & 3) {
    case 0:
      HASH_RETURN(0x1776D8467CB08D68LL, 
                  null, arr);
      break;
    case 2:
      HASH_RETURN(0x436A4C853F65B422LL, 
                  null, flags);
      break;
    default:
      break;
  }
  return c_ObjectData::os_getInit(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_arrayiterator
Variant c_arrayiterator::os_get(const char *s, int64 hash) {
  return c_ObjectData::os_get(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_arrayiterator
Variant &c_arrayiterator::os_lval(const char *s, int64 hash) {
  return c_ObjectData::os_lval(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_arrayiterator
void c_arrayiterator::o_get(Array &props) const {
  if (isInitialized(m_arr)) props.set(String("\0arrayiterator\0arr", 18, CopyString), m_arr.isReferenced() ? ref(m_arr) : m_arr, 0x6CDE66253326681DLL, true);
  if (isInitialized(m_flags)) props.set(String("\0arrayiterator\0flags", 20, CopyString), m_flags.isReferenced() ? ref(m_flags) : m_flags, 0x644DF75C0CB1D76BLL, true);
  c_ObjectData::o_get(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_get_arrayiterator
Variant c_arrayiterator::o_get(CStrRef prop, int64 phash, bool error /* = true */, const char *context /* = NULL */) {
  const char *s = context;
  if (!s) { context = s = FrameInjection::GetClassName(false); }
  int64 hash = hash_string_i(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x3D5870E53BF89873LL, arrayiterator) { return o_getPrivate(prop, phash, error); }
      break;
    default:
      break;
  }
  return c_arrayiterator::o_getPublic(prop, phash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_get_PUBLIC_arrayiterator
Variant c_arrayiterator::o_getPublic(CStrRef s, int64 hash, bool error /* = true */) {
  return c_ObjectData::o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PUBLIC_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_get_PRIVATE_arrayiterator
Variant c_arrayiterator::o_getPrivate(CStrRef s, int64 hash, bool error /* = true */) {
  if (hash < 0) hash = hash_string(s.data(), s.length());
  switch (hash & 3) {
    case 0:
      HASH_RETURN_STRING(0x1776D8467CB08D68LL, m_arr,
                         arr, 3);
      break;
    case 2:
      HASH_RETURN_STRING(0x436A4C853F65B422LL, m_flags,
                         flags, 5);
      break;
    default:
      break;
  }
  return o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_arrayiterator
bool c_arrayiterator::o_exists(CStrRef prop, int64 phash, const char *context /* = NULL */) const {
  const char *s = context;
  if (!s) { context = s = FrameInjection::GetClassName(false); }
  int64 hash = hash_string_i(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x3D5870E53BF89873LL, arrayiterator) { return o_existsPrivate(prop, phash); }
      break;
    default:
      break;
  }
  return c_arrayiterator::o_existsPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_arrayiterator
bool c_arrayiterator::o_existsPublic(CStrRef s, int64 hash) const {
  return c_ObjectData::o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_arrayiterator
bool c_arrayiterator::o_existsPrivate(CStrRef s, int64 hash) const {
  if (hash < 0) hash = hash_string(s.data(), s.length());
  switch (hash & 3) {
    case 0:
      HASH_EXISTS_STRING(0x1776D8467CB08D68LL, arr, 3);
      break;
    case 2:
      HASH_EXISTS_STRING(0x436A4C853F65B422LL, flags, 5);
      break;
    default:
      break;
  }
  return o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_set_arrayiterator
Variant c_arrayiterator::o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit /* = false */, const char *context /* = NULL */) {
  const char *s = context;
  if (!s) { context = s = FrameInjection::GetClassName(false); }
  int64 hash = hash_string_i(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x3D5870E53BF89873LL, arrayiterator) { return o_setPrivate(prop, phash, v, forInit); }
      break;
    default:
      break;
  }
  return c_arrayiterator::o_setPublic(prop, phash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_set_PUBLIC_arrayiterator
Variant c_arrayiterator::o_setPublic(CStrRef s, int64 hash, CVarRef v, bool forInit /* = false */) {
  return c_ObjectData::o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PUBLIC_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_set_PRIVATE_arrayiterator
Variant c_arrayiterator::o_setPrivate(CStrRef s, int64 hash, CVarRef v, bool forInit /* = false */) {
  if (hash < 0) hash = hash_string(s.data(), s.length());
  switch (hash & 3) {
    case 0:
      HASH_SET_STRING(0x1776D8467CB08D68LL, m_arr,
                      arr, 3);
      break;
    case 2:
      HASH_SET_STRING(0x436A4C853F65B422LL, m_flags,
                      flags, 5);
      break;
    default:
      break;
  }
  return o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PRIVATE_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_arrayiterator
Variant& c_arrayiterator::o_lval(CStrRef prop, int64 phash, const char *context /* = NULL */) {
  const char *s = context;
  if (!s) { context = s = FrameInjection::GetClassName(false); }
  int64 hash = hash_string_i(s);
  switch (hash & 1) {
    case 1:
      HASH_GUARD(0x3D5870E53BF89873LL, arrayiterator) { return o_lvalPrivate(prop, phash); }
      break;
    default:
      break;
  }
  return c_arrayiterator::o_lvalPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_arrayiterator
Variant& c_arrayiterator::o_lvalPublic(CStrRef s, int64 hash) {
  return c_ObjectData::o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_arrayiterator
Variant& c_arrayiterator::o_lvalPrivate(CStrRef s, int64 hash) {
  if (hash < 0) hash = hash_string(s.data(), s.length());
  switch (hash & 3) {
    case 0:
      HASH_RETURN_STRING(0x1776D8467CB08D68LL, m_arr,
                         arr, 3);
      break;
    case 2:
      HASH_RETURN_STRING(0x436A4C853F65B422LL, m_flags,
                         flags, 5);
      break;
    default:
      break;
  }
  return o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_arrayiterator
Variant c_arrayiterator::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_arrayiterator
IMPLEMENT_CLASS(arrayiterator)
c_arrayiterator *c_arrayiterator::create(Variant v_array, Variant v_flags //  = 0LL /* SORT_REGULAR */
) {
  CountableHelper h(this);
  init();
  t___construct(v_array, v_flags);
  return this;
}
ObjectData *c_arrayiterator::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count < 1 || count > 2) throw_wrong_arguments("arrayiterator::__construct", count, 1, 2, 2);
    if (count <= 1) (t___construct(params[0]));
    else (t___construct(params[0], params[1]));
  }
  return this;
}
void c_arrayiterator::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count < 1 || count > 2) throw_wrong_arguments("arrayiterator::__construct", count, 1, 2, 2);
  if (count <= 1) (t___construct(params[0]));
  else (t___construct(params[0], params[1]));
}
void c_arrayiterator::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count < 1 || count > 2) throw_wrong_arguments("arrayiterator::__construct", count, 1, 2, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  if (count <= 1) (t___construct(a0), null);
  else (t___construct(a0, a1), null);
}
ObjectData *c_arrayiterator::cloneImpl() {
  c_arrayiterator *obj = NEW(c_arrayiterator)();
  cloneSet(obj);
  return obj;
}
void c_arrayiterator::cloneSet(c_arrayiterator *clone) {
  clone->m_arr = m_arr.isReferenced() ? ref(m_arr) : m_arr;
  clone->m_flags = m_flags.isReferenced() ? ref(m_flags) : m_flags;
  ObjectData::cloneSet(clone);
}
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_arrayiterator
Variant c_arrayiterator::o_invoke(const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 63) {
    case 0:
      HASH_GUARD(0x3E6BCFB9742FC700LL, offsetexists) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::offsetexists", count, 1, 1, 1);
        return (t_offsetexists(params[0]));
      }
      break;
    case 2:
      HASH_GUARD(0x4DEE4A472DC69EC2LL, append) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::append", count, 1, 1, 1);
        return (t_append(params[0]), null);
      }
      break;
    case 4:
      HASH_GUARD(0x6413CB5154808C44LL, valid) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::valid", 0, 1);
        return (t_valid());
      }
      HASH_GUARD(0x4842AF70A71BE6C4LL, uksort) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::uksort", count, 1, 1, 1);
        return (t_uksort(params[0]));
      }
      break;
    case 6:
      HASH_GUARD(0x234F6A0A486E8646LL, natcasesort) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::natcasesort", 0, 1);
        return (t_natcasesort());
      }
      break;
    case 10:
      HASH_GUARD(0x2FC3A6941D522E0ALL, setflags) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::setflags", count, 1, 1, 1);
        return (t_setflags(params[0]), null);
      }
      break;
    case 16:
      HASH_GUARD(0x5CEFA5A265104D10LL, count) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::count", 0, 1);
        return (t_count());
      }
      break;
    case 17:
      HASH_GUARD(0x56EDB60C824E8C51LL, key) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::key", 0, 1);
        return (t_key());
      }
      break;
    case 24:
      HASH_GUARD(0x61D11ECEF4404498LL, offsetget) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::offsetget", count, 1, 1, 1);
        return (t_offsetget(params[0]));
      }
      HASH_GUARD(0x70448A629A74FB18LL, ksort) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::ksort", 0, 1);
        return (t_ksort());
      }
      break;
    case 28:
      HASH_GUARD(0x5B3A4A72846B21DCLL, current) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::current", 0, 1);
        return (t_current());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count < 1 || count > 2) return throw_wrong_arguments("arrayiterator::__construct", count, 1, 2, 2);
        if (count <= 1) return (t___construct(params[0]), null);
        return (t___construct(params[0], params[1]), null);
      }
      break;
    case 32:
      HASH_GUARD(0x6FACBD7F02B6FD60LL, uasort) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::uasort", count, 1, 1, 1);
        return (t_uasort(params[0]));
      }
      break;
    case 33:
      HASH_GUARD(0x0E210679B2DFD461LL, getarraycopy) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::getarraycopy", 0, 1);
        return (t_getarraycopy());
      }
      HASH_GUARD(0x27E7DBA875AD17E1LL, getflags) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::getflags", 0, 1);
        return (t_getflags());
      }
      break;
    case 39:
      HASH_GUARD(0x7EF5445C77054C67LL, seek) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::seek", count, 1, 1, 1);
        return (t_seek(params[0]), null);
      }
      break;
    case 42:
      HASH_GUARD(0x1670096FDE27AF6ALL, rewind) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::rewind", 0, 1);
        return (t_rewind());
      }
      break;
    case 46:
      HASH_GUARD(0x790B7C44A3442BEELL, asort) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::asort", 0, 1);
        return (t_asort());
      }
      break;
    case 51:
      HASH_GUARD(0x7DB9D839ACE0DEB3LL, natsort) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::natsort", 0, 1);
        return (t_natsort());
      }
      break;
    case 56:
      HASH_GUARD(0x3C6D50F3BB8102B8LL, next) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::next", 0, 1);
        return (t_next());
      }
      HASH_GUARD(0x0957F693A48AF738LL, offsetset) {
        if (count != 2) return throw_wrong_arguments("arrayiterator::offsetset", count, 2, 2, 1);
        return (t_offsetset(params[0], params[1]));
      }
      break;
    case 58:
      HASH_GUARD(0x08329980E6369ABALL, offsetunset) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::offsetunset", count, 1, 1, 1);
        return (t_offsetunset(params[0]));
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke(s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_arrayiterator
Variant c_arrayiterator::o_invoke_few_args(const char *s, int64 hash, int count, CVarRef a0, CVarRef a1, CVarRef a2, CVarRef a3, CVarRef a4, CVarRef a5) {
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 63) {
    case 0:
      HASH_GUARD(0x3E6BCFB9742FC700LL, offsetexists) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::offsetexists", count, 1, 1, 1);
        return (t_offsetexists(a0));
      }
      break;
    case 2:
      HASH_GUARD(0x4DEE4A472DC69EC2LL, append) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::append", count, 1, 1, 1);
        return (t_append(a0), null);
      }
      break;
    case 4:
      HASH_GUARD(0x6413CB5154808C44LL, valid) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::valid", 0, 1);
        return (t_valid());
      }
      HASH_GUARD(0x4842AF70A71BE6C4LL, uksort) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::uksort", count, 1, 1, 1);
        return (t_uksort(a0));
      }
      break;
    case 6:
      HASH_GUARD(0x234F6A0A486E8646LL, natcasesort) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::natcasesort", 0, 1);
        return (t_natcasesort());
      }
      break;
    case 10:
      HASH_GUARD(0x2FC3A6941D522E0ALL, setflags) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::setflags", count, 1, 1, 1);
        return (t_setflags(a0), null);
      }
      break;
    case 16:
      HASH_GUARD(0x5CEFA5A265104D10LL, count) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::count", 0, 1);
        return (t_count());
      }
      break;
    case 17:
      HASH_GUARD(0x56EDB60C824E8C51LL, key) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::key", 0, 1);
        return (t_key());
      }
      break;
    case 24:
      HASH_GUARD(0x61D11ECEF4404498LL, offsetget) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::offsetget", count, 1, 1, 1);
        return (t_offsetget(a0));
      }
      HASH_GUARD(0x70448A629A74FB18LL, ksort) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::ksort", 0, 1);
        return (t_ksort());
      }
      break;
    case 28:
      HASH_GUARD(0x5B3A4A72846B21DCLL, current) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::current", 0, 1);
        return (t_current());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count < 1 || count > 2) return throw_wrong_arguments("arrayiterator::__construct", count, 1, 2, 2);
        if (count <= 1) return (t___construct(a0), null);
        return (t___construct(a0, a1), null);
      }
      break;
    case 32:
      HASH_GUARD(0x6FACBD7F02B6FD60LL, uasort) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::uasort", count, 1, 1, 1);
        return (t_uasort(a0));
      }
      break;
    case 33:
      HASH_GUARD(0x0E210679B2DFD461LL, getarraycopy) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::getarraycopy", 0, 1);
        return (t_getarraycopy());
      }
      HASH_GUARD(0x27E7DBA875AD17E1LL, getflags) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::getflags", 0, 1);
        return (t_getflags());
      }
      break;
    case 39:
      HASH_GUARD(0x7EF5445C77054C67LL, seek) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::seek", count, 1, 1, 1);
        return (t_seek(a0), null);
      }
      break;
    case 42:
      HASH_GUARD(0x1670096FDE27AF6ALL, rewind) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::rewind", 0, 1);
        return (t_rewind());
      }
      break;
    case 46:
      HASH_GUARD(0x790B7C44A3442BEELL, asort) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::asort", 0, 1);
        return (t_asort());
      }
      break;
    case 51:
      HASH_GUARD(0x7DB9D839ACE0DEB3LL, natsort) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::natsort", 0, 1);
        return (t_natsort());
      }
      break;
    case 56:
      HASH_GUARD(0x3C6D50F3BB8102B8LL, next) {
        if (count > 0) return throw_toomany_arguments("arrayiterator::next", 0, 1);
        return (t_next());
      }
      HASH_GUARD(0x0957F693A48AF738LL, offsetset) {
        if (count != 2) return throw_wrong_arguments("arrayiterator::offsetset", count, 2, 2, 1);
        return (t_offsetset(a0, a1));
      }
      break;
    case 58:
      HASH_GUARD(0x08329980E6369ABALL, offsetunset) {
        if (count != 1) return throw_wrong_arguments("arrayiterator::offsetunset", count, 1, 1, 1);
        return (t_offsetunset(a0));
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke_few_args(s, hash, count, a0, a1, a2, a3, a4, a5);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_arrayiterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_arrayiterator
Variant c_arrayiterator::os_invoke(const char *c, const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
  return c_ObjectData::os_invoke(c, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_arrayiterator
Variant c_arrayiterator::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 63) {
    case 0:
      HASH_GUARD(0x3E6BCFB9742FC700LL, offsetexists) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("arrayiterator::offsetexists", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_offsetexists(a0));
      }
      break;
    case 2:
      HASH_GUARD(0x4DEE4A472DC69EC2LL, append) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("arrayiterator::append", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_append(a0), null);
      }
      break;
    case 4:
      HASH_GUARD(0x6413CB5154808C44LL, valid) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("arrayiterator::valid", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_valid());
      }
      HASH_GUARD(0x4842AF70A71BE6C4LL, uksort) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("arrayiterator::uksort", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_uksort(a0));
      }
      break;
    case 6:
      HASH_GUARD(0x234F6A0A486E8646LL, natcasesort) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("arrayiterator::natcasesort", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_natcasesort());
      }
      break;
    case 10:
      HASH_GUARD(0x2FC3A6941D522E0ALL, setflags) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("arrayiterator::setflags", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_setflags(a0), null);
      }
      break;
    case 16:
      HASH_GUARD(0x5CEFA5A265104D10LL, count) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("arrayiterator::count", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_count());
      }
      break;
    case 17:
      HASH_GUARD(0x56EDB60C824E8C51LL, key) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("arrayiterator::key", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_key());
      }
      break;
    case 24:
      HASH_GUARD(0x61D11ECEF4404498LL, offsetget) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("arrayiterator::offsetget", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_offsetget(a0));
      }
      HASH_GUARD(0x70448A629A74FB18LL, ksort) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("arrayiterator::ksort", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_ksort());
      }
      break;
    case 28:
      HASH_GUARD(0x5B3A4A72846B21DCLL, current) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("arrayiterator::current", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_current());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count < 1 || count > 2) return throw_wrong_arguments("arrayiterator::__construct", count, 1, 2, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 1) return (t___construct(a0), null);
        else return (t___construct(a0, a1), null);
      }
      break;
    case 32:
      HASH_GUARD(0x6FACBD7F02B6FD60LL, uasort) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("arrayiterator::uasort", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_uasort(a0));
      }
      break;
    case 33:
      HASH_GUARD(0x0E210679B2DFD461LL, getarraycopy) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("arrayiterator::getarraycopy", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getarraycopy());
      }
      HASH_GUARD(0x27E7DBA875AD17E1LL, getflags) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("arrayiterator::getflags", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getflags());
      }
      break;
    case 39:
      HASH_GUARD(0x7EF5445C77054C67LL, seek) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("arrayiterator::seek", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_seek(a0), null);
      }
      break;
    case 42:
      HASH_GUARD(0x1670096FDE27AF6ALL, rewind) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("arrayiterator::rewind", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_rewind());
      }
      break;
    case 46:
      HASH_GUARD(0x790B7C44A3442BEELL, asort) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("arrayiterator::asort", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_asort());
      }
      break;
    case 51:
      HASH_GUARD(0x7DB9D839ACE0DEB3LL, natsort) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("arrayiterator::natsort", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_natsort());
      }
      break;
    case 56:
      HASH_GUARD(0x3C6D50F3BB8102B8LL, next) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("arrayiterator::next", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_next());
      }
      HASH_GUARD(0x0957F693A48AF738LL, offsetset) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("arrayiterator::offsetset", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_offsetset(a0, a1));
      }
      break;
    case 58:
      HASH_GUARD(0x08329980E6369ABALL, offsetunset) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("arrayiterator::offsetunset", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_offsetunset(a0));
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_arrayiterator::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  return c_ObjectData::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
struct ObjectStaticCallbacks cw_arrayiterator = {
  c_arrayiterator::os_getInit,
  c_arrayiterator::os_get,
  c_arrayiterator::os_lval,
  c_arrayiterator::os_invoke,
  c_arrayiterator::os_constant,
};
void c_arrayiterator::init() {
  m_arr = null;
  m_flags = null;
}
/* SRC: classes/iterator.php line 75 */
void c_arrayiterator::t___construct(Variant v_array, Variant v_flags //  = 0LL /* SORT_REGULAR */
) {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::__construct);
  bool oldInCtor = gasInCtor(true);
  (m_arr = v_array);
  (m_flags = v_flags);
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/iterator.php line 80 */
void c_arrayiterator::t_append(CVarRef v_value) {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::append);
  {
    Variant &tmp1((m_arr));
    tmp1.append((v_value));
  }
} /* function */
/* SRC: classes/iterator.php line 84 */
bool c_arrayiterator::t_asort() {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::asort);
  {
    const Variant &tmp2((lval(m_arr)));
    Variant &tmp2_lv = const_cast<Variant&>(tmp2);
    return x_asort(ref(tmp2_lv), toInt32(m_flags));
  }
} /* function */
/* SRC: classes/iterator.php line 88 */
int c_arrayiterator::t_count() {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::count);
  return x_count(m_arr);
} /* function */
/* SRC: classes/iterator.php line 92 */
Variant c_arrayiterator::t_current() {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::current);
  return x_current(ref(lval(m_arr)));
} /* function */
/* SRC: classes/iterator.php line 96 */
Variant c_arrayiterator::t_getarraycopy() {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::getArrayCopy);
  return m_arr;
} /* function */
/* SRC: classes/iterator.php line 100 */
Variant c_arrayiterator::t_getflags() {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::getFlags);
  return m_flags;
} /* function */
/* SRC: classes/iterator.php line 104 */
Variant c_arrayiterator::t_key() {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::key);
  return x_key(ref(lval(m_arr)));
} /* function */
/* SRC: classes/iterator.php line 108 */
bool c_arrayiterator::t_ksort() {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::ksort);
  {
    const Variant &tmp3((lval(m_arr)));
    Variant &tmp3_lv = const_cast<Variant&>(tmp3);
    return x_ksort(ref(tmp3_lv), toInt32(m_flags));
  }
} /* function */
/* SRC: classes/iterator.php line 112 */
Variant c_arrayiterator::t_natcasesort() {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::natcasesort);
  return x_natcasesort(ref(lval(m_arr)));
} /* function */
/* SRC: classes/iterator.php line 116 */
Variant c_arrayiterator::t_natsort() {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::natsort);
  return x_natsort(ref(lval(m_arr)));
} /* function */
/* SRC: classes/iterator.php line 120 */
Variant c_arrayiterator::t_next() {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::next);
  return x_next(ref(lval(m_arr)));
} /* function */
/* SRC: classes/iterator.php line 124 */
bool c_arrayiterator::t_offsetexists(CVarRef v_index) {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::offsetExists);
  return isset(m_arr, v_index);
} /* function */
/* SRC: classes/iterator.php line 128 */
Variant c_arrayiterator::t_offsetget(Variant v_index) {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::offsetGet);
  return m_arr.rvalAt(v_index, -1, true);
} /* function */
/* SRC: classes/iterator.php line 128 */
Variant &c_arrayiterator::___offsetget_lval(Variant v_index) {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::offsetGet);
  Variant &v = get_system_globals()->__lvalProxy;
  v = t_offsetget(v_index);
  return v;
} /* function */
/* SRC: classes/iterator.php line 132 */
Variant c_arrayiterator::t_offsetset(CVarRef v_index, CVarRef v_newval) {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::offsetSet);
  {
    Variant &tmp4((m_arr));
    tmp4.set(v_index, (v_newval));
  }
  return null;
} /* function */
/* SRC: classes/iterator.php line 136 */
Variant c_arrayiterator::t_offsetunset(CVarRef v_index) {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::offsetUnset);
  DECLARE_SYSTEM_GLOBALS(g);
  m_arr.weakRemove(v_index);
  return null;
} /* function */
/* SRC: classes/iterator.php line 140 */
Variant c_arrayiterator::t_rewind() {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::rewind);
  return x_reset(ref(lval(m_arr)));
} /* function */
/* SRC: classes/iterator.php line 144 */
void c_arrayiterator::t_seek(CVarRef v_position) {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::seek);
  int64 v_i = 0;

  x_reset(ref(lval(m_arr)));
  {
    LOOP_COUNTER(5);
    for ((v_i = 0LL); less(v_i, v_position); v_i++) {
      LOOP_COUNTER_CHECK(5);
      {
        if (!(toBoolean(x_next(ref(lval(m_arr)))))) {
          {
            break;
          }
        }
      }
    }
  }
} /* function */
/* SRC: classes/iterator.php line 153 */
void c_arrayiterator::t_setflags(CVarRef v_flags) {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::setFlags);
  (m_flags = v_flags);
} /* function */
/* SRC: classes/iterator.php line 157 */
bool c_arrayiterator::t_uasort(CVarRef v_cmp_function) {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::uasort);
  {
    const Variant &tmp6((lval(m_arr)));
    Variant &tmp6_lv = const_cast<Variant&>(tmp6);
    return x_uasort(ref(tmp6_lv), v_cmp_function);
  }
} /* function */
/* SRC: classes/iterator.php line 161 */
bool c_arrayiterator::t_uksort(Variant v_cmp_function) {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::uksort);
  return toBoolean(invoke("uksort", Array(ArrayInit(1, true).setRef(0, v_cmp_function).create()), 0x4842AF70A71BE6C4LL));
} /* function */
/* SRC: classes/iterator.php line 165 */
bool c_arrayiterator::t_valid() {
  INSTANCE_METHOD_INJECTION(ArrayIterator, ArrayIterator::valid);
  return !same(x_key(ref(lval(m_arr))), null);
} /* function */
/* SRC: classes/iterator.php line 279 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_appenditerator
Variant c_appenditerator::os_getInit(const char *s, int64 hash) {
  DECLARE_SYSTEM_GLOBALS(g);
  if (hash < 0) hash = hash_string(s);
  switch (hash & 1) {
    case 0:
      HASH_RETURN(0x47017DB1BE43329ALL, 
                  null, iterators);
      break;
    default:
      break;
  }
  return c_ObjectData::os_getInit(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_appenditerator
Variant c_appenditerator::os_get(const char *s, int64 hash) {
  return c_ObjectData::os_get(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_appenditerator
Variant &c_appenditerator::os_lval(const char *s, int64 hash) {
  return c_ObjectData::os_lval(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_appenditerator
void c_appenditerator::o_get(Array &props) const {
  if (isInitialized(m_iterators)) props.set(String("\0appenditerator\0iterators", 25, CopyString), m_iterators.isReferenced() ? ref(m_iterators) : m_iterators, 0x370B757E55B5993DLL, true);
  c_ObjectData::o_get(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_get_appenditerator
Variant c_appenditerator::o_get(CStrRef prop, int64 phash, bool error /* = true */, const char *context /* = NULL */) {
  const char *s = context;
  if (!s) { context = s = FrameInjection::GetClassName(false); }
  int64 hash = hash_string_i(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x2E363D51549781C8LL, appenditerator) { return o_getPrivate(prop, phash, error); }
      break;
    default:
      break;
  }
  return c_appenditerator::o_getPublic(prop, phash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_get_PUBLIC_appenditerator
Variant c_appenditerator::o_getPublic(CStrRef s, int64 hash, bool error /* = true */) {
  return c_ObjectData::o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PUBLIC_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_get_PRIVATE_appenditerator
Variant c_appenditerator::o_getPrivate(CStrRef s, int64 hash, bool error /* = true */) {
  if (hash < 0) hash = hash_string(s.data(), s.length());
  switch (hash & 1) {
    case 0:
      HASH_RETURN_STRING(0x47017DB1BE43329ALL, m_iterators,
                         iterators, 9);
      break;
    default:
      break;
  }
  return o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_appenditerator
bool c_appenditerator::o_exists(CStrRef prop, int64 phash, const char *context /* = NULL */) const {
  const char *s = context;
  if (!s) { context = s = FrameInjection::GetClassName(false); }
  int64 hash = hash_string_i(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x2E363D51549781C8LL, appenditerator) { return o_existsPrivate(prop, phash); }
      break;
    default:
      break;
  }
  return c_appenditerator::o_existsPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_appenditerator
bool c_appenditerator::o_existsPublic(CStrRef s, int64 hash) const {
  return c_ObjectData::o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_appenditerator
bool c_appenditerator::o_existsPrivate(CStrRef s, int64 hash) const {
  if (hash < 0) hash = hash_string(s.data(), s.length());
  switch (hash & 1) {
    case 0:
      HASH_EXISTS_STRING(0x47017DB1BE43329ALL, iterators, 9);
      break;
    default:
      break;
  }
  return o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_set_appenditerator
Variant c_appenditerator::o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit /* = false */, const char *context /* = NULL */) {
  const char *s = context;
  if (!s) { context = s = FrameInjection::GetClassName(false); }
  int64 hash = hash_string_i(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x2E363D51549781C8LL, appenditerator) { return o_setPrivate(prop, phash, v, forInit); }
      break;
    default:
      break;
  }
  return c_appenditerator::o_setPublic(prop, phash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_set_PUBLIC_appenditerator
Variant c_appenditerator::o_setPublic(CStrRef s, int64 hash, CVarRef v, bool forInit /* = false */) {
  return c_ObjectData::o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PUBLIC_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_set_PRIVATE_appenditerator
Variant c_appenditerator::o_setPrivate(CStrRef s, int64 hash, CVarRef v, bool forInit /* = false */) {
  if (hash < 0) hash = hash_string(s.data(), s.length());
  switch (hash & 1) {
    case 0:
      HASH_SET_STRING(0x47017DB1BE43329ALL, m_iterators,
                      iterators, 9);
      break;
    default:
      break;
  }
  return o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PRIVATE_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_appenditerator
Variant& c_appenditerator::o_lval(CStrRef prop, int64 phash, const char *context /* = NULL */) {
  const char *s = context;
  if (!s) { context = s = FrameInjection::GetClassName(false); }
  int64 hash = hash_string_i(s);
  switch (hash & 1) {
    case 0:
      HASH_GUARD(0x2E363D51549781C8LL, appenditerator) { return o_lvalPrivate(prop, phash); }
      break;
    default:
      break;
  }
  return c_appenditerator::o_lvalPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_appenditerator
Variant& c_appenditerator::o_lvalPublic(CStrRef s, int64 hash) {
  return c_ObjectData::o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_appenditerator
Variant& c_appenditerator::o_lvalPrivate(CStrRef s, int64 hash) {
  if (hash < 0) hash = hash_string(s.data(), s.length());
  switch (hash & 1) {
    case 0:
      HASH_RETURN_STRING(0x47017DB1BE43329ALL, m_iterators,
                         iterators, 9);
      break;
    default:
      break;
  }
  return o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_appenditerator
Variant c_appenditerator::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_appenditerator
IMPLEMENT_CLASS(appenditerator)
c_appenditerator *c_appenditerator::create() {
  CountableHelper h(this);
  init();
  t___construct();
  return this;
}
ObjectData *c_appenditerator::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count > 0) throw_toomany_arguments("appenditerator::__construct", 0, 2);
    (t___construct());
  }
  return this;
}
void c_appenditerator::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count > 0) throw_toomany_arguments("appenditerator::__construct", 0, 2);
  (t___construct());
}
void c_appenditerator::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count > 0) throw_toomany_arguments("appenditerator::__construct", 0, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  (t___construct(), null);
}
ObjectData *c_appenditerator::cloneImpl() {
  c_appenditerator *obj = NEW(c_appenditerator)();
  cloneSet(obj);
  return obj;
}
void c_appenditerator::cloneSet(c_appenditerator *clone) {
  clone->m_iterators = m_iterators.isReferenced() ? ref(m_iterators) : m_iterators;
  ObjectData::cloneSet(clone);
}
Variant c_appenditerator::doCall(Variant v_name, Variant v_arguments, bool fatal) {
  return t___call(v_name, !v_arguments.isNull() ? v_arguments : Variant(Array::Create()));
}
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_appenditerator
Variant c_appenditerator::o_invoke(const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 31) {
    case 2:
      HASH_GUARD(0x4DEE4A472DC69EC2LL, append) {
        if (count != 1) return throw_wrong_arguments("appenditerator::append", count, 1, 1, 1);
        return (t_append(params[0]), null);
      }
      break;
    case 4:
      HASH_GUARD(0x6413CB5154808C44LL, valid) {
        if (count > 0) return throw_toomany_arguments("appenditerator::valid", 0, 1);
        return (t_valid());
      }
      HASH_GUARD(0x3106F858B09C7424LL, getinneriterator) {
        if (count > 0) return throw_toomany_arguments("appenditerator::getinneriterator", 0, 1);
        return (t_getinneriterator());
      }
      break;
    case 10:
      HASH_GUARD(0x1670096FDE27AF6ALL, rewind) {
        if (count > 0) return throw_toomany_arguments("appenditerator::rewind", 0, 1);
        return (t_rewind(), null);
      }
      break;
    case 12:
      HASH_GUARD(0x5D73364F53CEEB6CLL, __call) {
        if (count != 2) return throw_wrong_arguments("appenditerator::__call", count, 2, 2, 1);
        return (t___call(params[0], params[1]));
      }
      break;
    case 17:
      HASH_GUARD(0x56EDB60C824E8C51LL, key) {
        if (count > 0) return throw_toomany_arguments("appenditerator::key", 0, 1);
        return (t_key());
      }
      break;
    case 24:
      HASH_GUARD(0x3C6D50F3BB8102B8LL, next) {
        if (count > 0) return throw_toomany_arguments("appenditerator::next", 0, 1);
        return (t_next(), null);
      }
      break;
    case 28:
      HASH_GUARD(0x5B3A4A72846B21DCLL, current) {
        if (count > 0) return throw_toomany_arguments("appenditerator::current", 0, 1);
        return (t_current());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count > 0) return throw_toomany_arguments("appenditerator::__construct", 0, 2);
        return (t___construct(), null);
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke(s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_appenditerator
Variant c_appenditerator::o_invoke_few_args(const char *s, int64 hash, int count, CVarRef a0, CVarRef a1, CVarRef a2, CVarRef a3, CVarRef a4, CVarRef a5) {
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 31) {
    case 2:
      HASH_GUARD(0x4DEE4A472DC69EC2LL, append) {
        if (count != 1) return throw_wrong_arguments("appenditerator::append", count, 1, 1, 1);
        return (t_append(a0), null);
      }
      break;
    case 4:
      HASH_GUARD(0x6413CB5154808C44LL, valid) {
        if (count > 0) return throw_toomany_arguments("appenditerator::valid", 0, 1);
        return (t_valid());
      }
      HASH_GUARD(0x3106F858B09C7424LL, getinneriterator) {
        if (count > 0) return throw_toomany_arguments("appenditerator::getinneriterator", 0, 1);
        return (t_getinneriterator());
      }
      break;
    case 10:
      HASH_GUARD(0x1670096FDE27AF6ALL, rewind) {
        if (count > 0) return throw_toomany_arguments("appenditerator::rewind", 0, 1);
        return (t_rewind(), null);
      }
      break;
    case 12:
      HASH_GUARD(0x5D73364F53CEEB6CLL, __call) {
        if (count != 2) return throw_wrong_arguments("appenditerator::__call", count, 2, 2, 1);
        return (t___call(a0, a1));
      }
      break;
    case 17:
      HASH_GUARD(0x56EDB60C824E8C51LL, key) {
        if (count > 0) return throw_toomany_arguments("appenditerator::key", 0, 1);
        return (t_key());
      }
      break;
    case 24:
      HASH_GUARD(0x3C6D50F3BB8102B8LL, next) {
        if (count > 0) return throw_toomany_arguments("appenditerator::next", 0, 1);
        return (t_next(), null);
      }
      break;
    case 28:
      HASH_GUARD(0x5B3A4A72846B21DCLL, current) {
        if (count > 0) return throw_toomany_arguments("appenditerator::current", 0, 1);
        return (t_current());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count > 0) return throw_toomany_arguments("appenditerator::__construct", 0, 2);
        return (t___construct(), null);
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke_few_args(s, hash, count, a0, a1, a2, a3, a4, a5);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_appenditerator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_appenditerator
Variant c_appenditerator::os_invoke(const char *c, const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
  return c_ObjectData::os_invoke(c, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_appenditerator
Variant c_appenditerator::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 31) {
    case 2:
      HASH_GUARD(0x4DEE4A472DC69EC2LL, append) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("appenditerator::append", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_append(a0), null);
      }
      break;
    case 4:
      HASH_GUARD(0x6413CB5154808C44LL, valid) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("appenditerator::valid", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_valid());
      }
      HASH_GUARD(0x3106F858B09C7424LL, getinneriterator) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("appenditerator::getinneriterator", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinneriterator());
      }
      break;
    case 10:
      HASH_GUARD(0x1670096FDE27AF6ALL, rewind) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("appenditerator::rewind", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_rewind(), null);
      }
      break;
    case 12:
      HASH_GUARD(0x5D73364F53CEEB6CLL, __call) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 2) return throw_wrong_arguments("appenditerator::__call", count, 2, 2, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___call(a0, a1));
      }
      break;
    case 17:
      HASH_GUARD(0x56EDB60C824E8C51LL, key) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("appenditerator::key", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_key());
      }
      break;
    case 24:
      HASH_GUARD(0x3C6D50F3BB8102B8LL, next) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("appenditerator::next", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_next(), null);
      }
      break;
    case 28:
      HASH_GUARD(0x5B3A4A72846B21DCLL, current) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("appenditerator::current", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_current());
      }
      break;
    case 31:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("appenditerator::__construct", 0, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(), null);
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_appenditerator::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  return c_ObjectData::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
struct ObjectStaticCallbacks cw_appenditerator = {
  c_appenditerator::os_getInit,
  c_appenditerator::os_get,
  c_appenditerator::os_lval,
  c_appenditerator::os_invoke,
  c_appenditerator::os_constant,
};
void c_appenditerator::init() {
  m_iterators = null;
}
/* SRC: classes/iterator.php line 282 */
void c_appenditerator::t___construct() {
  INSTANCE_METHOD_INJECTION(AppendIterator, AppendIterator::__construct);
  bool oldInCtor = gasInCtor(true);
  (m_iterators = p_arrayiterator((NEWOBJ(c_arrayiterator)())->create(SystemScalarArrays::ssa_[0])));
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/iterator.php line 286 */
void c_appenditerator::t_append(p_iterator v_it) {
  INSTANCE_METHOD_INJECTION(AppendIterator, AppendIterator::append);
  m_iterators. BIND_CLASS_DOT o_invoke_few_args("append", 0x4DEE4A472DC69EC2LL, 1, v_it);
} /* function */
/* SRC: classes/iterator.php line 290 */
Variant c_appenditerator::t_getinneriterator() {
  INSTANCE_METHOD_INJECTION(AppendIterator, AppendIterator::getInnerIterator);
  return wrap_variant(m_iterators. BIND_CLASS_DOT o_invoke_few_args("current", 0x5B3A4A72846B21DCLL, 0));
} /* function */
/* SRC: classes/iterator.php line 294 */
void c_appenditerator::t_rewind() {
  INSTANCE_METHOD_INJECTION(AppendIterator, AppendIterator::rewind);
  m_iterators. BIND_CLASS_DOT o_invoke_few_args("rewind", 0x1670096FDE27AF6ALL, 0);
  if (toBoolean(m_iterators. BIND_CLASS_DOT o_invoke_few_args("valid", 0x6413CB5154808C44LL, 0))) {
    {
      o_root_invoke_few_args("getInnerIterator", 0x3106F858B09C7424LL, 0). BIND_CLASS_DOT o_invoke_few_args("rewind", 0x1670096FDE27AF6ALL, 0);
    }
  }
} /* function */
/* SRC: classes/iterator.php line 301 */
bool c_appenditerator::t_valid() {
  INSTANCE_METHOD_INJECTION(AppendIterator, AppendIterator::valid);
  return toBoolean(m_iterators. BIND_CLASS_DOT o_invoke_few_args("valid", 0x6413CB5154808C44LL, 0)) && toBoolean(o_root_invoke_few_args("getInnerIterator", 0x3106F858B09C7424LL, 0). BIND_CLASS_DOT o_invoke_few_args("valid", 0x6413CB5154808C44LL, 0));
} /* function */
/* SRC: classes/iterator.php line 305 */
Variant c_appenditerator::t_current() {
  INSTANCE_METHOD_INJECTION(AppendIterator, AppendIterator::current);
  return toBoolean(m_iterators. BIND_CLASS_DOT o_invoke_few_args("valid", 0x6413CB5154808C44LL, 0)) ? ((Variant)(o_root_invoke_few_args("getInnerIterator", 0x3106F858B09C7424LL, 0). BIND_CLASS_DOT o_invoke_few_args("current", 0x5B3A4A72846B21DCLL, 0))) : ((Variant)(null));
} /* function */
/* SRC: classes/iterator.php line 314 */
Variant c_appenditerator::t_key() {
  INSTANCE_METHOD_INJECTION(AppendIterator, AppendIterator::key);
  return toBoolean(m_iterators. BIND_CLASS_DOT o_invoke_few_args("valid", 0x6413CB5154808C44LL, 0)) ? ((Variant)(o_root_invoke_few_args("getInnerIterator", 0x3106F858B09C7424LL, 0). BIND_CLASS_DOT o_invoke_few_args("key", 0x56EDB60C824E8C51LL, 0))) : ((Variant)(null));
} /* function */
/* SRC: classes/iterator.php line 318 */
void c_appenditerator::t_next() {
  INSTANCE_METHOD_INJECTION(AppendIterator, AppendIterator::next);
  if (!(toBoolean(m_iterators. BIND_CLASS_DOT o_invoke_few_args("valid", 0x6413CB5154808C44LL, 0)))) {
    {
      return;
    }
  }
  o_root_invoke_few_args("getInnerIterator", 0x3106F858B09C7424LL, 0). BIND_CLASS_DOT o_invoke_few_args("next", 0x3C6D50F3BB8102B8LL, 0);
  if (toBoolean(o_root_invoke_few_args("getInnerIterator", 0x3106F858B09C7424LL, 0). BIND_CLASS_DOT o_invoke_few_args("valid", 0x6413CB5154808C44LL, 0))) {
    {
      return;
    }
  }
  m_iterators. BIND_CLASS_DOT o_invoke_few_args("next", 0x3C6D50F3BB8102B8LL, 0);
  LOOP_COUNTER(7);
  {
    while (toBoolean(m_iterators. BIND_CLASS_DOT o_invoke_few_args("valid", 0x6413CB5154808C44LL, 0))) {
      LOOP_COUNTER_CHECK(7);
      {
        o_root_invoke_few_args("getInnerIterator", 0x3106F858B09C7424LL, 0). BIND_CLASS_DOT o_invoke_few_args("rewind", 0x1670096FDE27AF6ALL, 0);
        if (toBoolean(o_root_invoke_few_args("getInnerIterator", 0x3106F858B09C7424LL, 0). BIND_CLASS_DOT o_invoke_few_args("valid", 0x6413CB5154808C44LL, 0))) {
          {
            return;
          }
        }
        m_iterators. BIND_CLASS_DOT o_invoke_few_args("next", 0x3C6D50F3BB8102B8LL, 0);
      }
    }
  }
} /* function */
/* SRC: classes/iterator.php line 336 */
Variant c_appenditerator::t___call(Variant v_func, Variant v_params) {
  INSTANCE_METHOD_INJECTION(AppendIterator, AppendIterator::__call);
  INCALL_HELPER(v_func);
  {
    ArrayInit tmp8(2, true);
    tmp8.set(0, o_root_invoke_few_args("getInnerIterator", 0x3106F858B09C7424LL, 0));
    tmp8.set(1, v_func);
    return x_call_user_func_array(Array(tmp8), toArray(v_params));
  }
} /* function */
/* SRC: classes/iterator.php line 209 */
const int64 q_recursivedirectoryiterator_CURRENT_AS_SELF = 0LL;
const int64 q_recursivedirectoryiterator_CURRENT_AS_FILEINFO = 16LL;
const int64 q_recursivedirectoryiterator_CURRENT_AS_PATHNAME = 32LL;
const int64 q_recursivedirectoryiterator_KEY_AS_PATHNAME = 0LL;
const int64 q_recursivedirectoryiterator_KEY_AS_FILENAME = 256LL;
const int64 q_recursivedirectoryiterator_NEW_CURRENT_AND_KEY = 272LL;
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_recursivedirectoryiterator
Variant c_recursivedirectoryiterator::os_getInit(const char *s, int64 hash) {
  return c_directoryiterator::os_getInit(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_recursivedirectoryiterator
Variant c_recursivedirectoryiterator::os_get(const char *s, int64 hash) {
  return c_directoryiterator::os_get(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_recursivedirectoryiterator
Variant &c_recursivedirectoryiterator::os_lval(const char *s, int64 hash) {
  return c_directoryiterator::os_lval(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_recursivedirectoryiterator
void c_recursivedirectoryiterator::o_get(Array &props) const {
  c_directoryiterator::o_get(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_get_recursivedirectoryiterator
Variant c_recursivedirectoryiterator::o_get(CStrRef prop, int64 phash, bool error /* = true */, const char *context /* = NULL */) {
  return c_recursivedirectoryiterator::o_getPublic(prop, phash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_get_PUBLIC_recursivedirectoryiterator
Variant c_recursivedirectoryiterator::o_getPublic(CStrRef s, int64 hash, bool error /* = true */) {
  return c_directoryiterator::o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PUBLIC_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_get_PRIVATE_recursivedirectoryiterator
Variant c_recursivedirectoryiterator::o_getPrivate(CStrRef s, int64 hash, bool error /* = true */) {
  return o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_recursivedirectoryiterator
bool c_recursivedirectoryiterator::o_exists(CStrRef prop, int64 phash, const char *context /* = NULL */) const {
  return c_recursivedirectoryiterator::o_existsPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_recursivedirectoryiterator
bool c_recursivedirectoryiterator::o_existsPublic(CStrRef s, int64 hash) const {
  return c_directoryiterator::o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_recursivedirectoryiterator
bool c_recursivedirectoryiterator::o_existsPrivate(CStrRef s, int64 hash) const {
  return o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_set_recursivedirectoryiterator
Variant c_recursivedirectoryiterator::o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit /* = false */, const char *context /* = NULL */) {
  return c_recursivedirectoryiterator::o_setPublic(prop, phash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_set_PUBLIC_recursivedirectoryiterator
Variant c_recursivedirectoryiterator::o_setPublic(CStrRef s, int64 hash, CVarRef v, bool forInit /* = false */) {
  return c_directoryiterator::o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PUBLIC_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_set_PRIVATE_recursivedirectoryiterator
Variant c_recursivedirectoryiterator::o_setPrivate(CStrRef s, int64 hash, CVarRef v, bool forInit /* = false */) {
  return o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PRIVATE_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_recursivedirectoryiterator
Variant& c_recursivedirectoryiterator::o_lval(CStrRef prop, int64 phash, const char *context /* = NULL */) {
  return c_recursivedirectoryiterator::o_lvalPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_recursivedirectoryiterator
Variant& c_recursivedirectoryiterator::o_lvalPublic(CStrRef s, int64 hash) {
  return c_directoryiterator::o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_recursivedirectoryiterator
Variant& c_recursivedirectoryiterator::o_lvalPrivate(CStrRef s, int64 hash) {
  return o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_recursivedirectoryiterator
Variant c_recursivedirectoryiterator::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 15) {
    case 1:
      HASH_RETURN(0x6AA4D24FB119FCF1LL, q_recursivedirectoryiterator_KEY_AS_PATHNAME, KEY_AS_PATHNAME);
      break;
    case 4:
      HASH_RETURN(0x0F0DCA1A52147D84LL, q_recursivedirectoryiterator_NEW_CURRENT_AND_KEY, NEW_CURRENT_AND_KEY);
      break;
    case 6:
      HASH_RETURN(0x05C4C37A5B7D4F66LL, q_recursivedirectoryiterator_CURRENT_AS_PATHNAME, CURRENT_AS_PATHNAME);
      break;
    case 9:
      HASH_RETURN(0x04159AAAA6E656D9LL, q_recursivedirectoryiterator_CURRENT_AS_FILEINFO, CURRENT_AS_FILEINFO);
      HASH_RETURN(0x71C805ABFB82F8A9LL, q_recursivedirectoryiterator_KEY_AS_FILENAME, KEY_AS_FILENAME);
      break;
    case 15:
      HASH_RETURN(0x50AC76DA11127DEFLL, q_recursivedirectoryiterator_CURRENT_AS_SELF, CURRENT_AS_SELF);
      break;
    default:
      break;
  }
  return c_directoryiterator::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_recursivedirectoryiterator
IMPLEMENT_CLASS(recursivedirectoryiterator)
c_recursivedirectoryiterator *c_recursivedirectoryiterator::create(Variant v_path, Variant v_flags //  = 16LL /* recursivedirectoryiterator::CURRENT_AS_FILEINFO */
) {
  CountableHelper h(this);
  init();
  t___construct(v_path, v_flags);
  return this;
}
ObjectData *c_recursivedirectoryiterator::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count < 1 || count > 2) throw_wrong_arguments("recursivedirectoryiterator::__construct", count, 1, 2, 2);
    if (count <= 1) (t___construct(params[0]));
    else (t___construct(params[0], params[1]));
  }
  return this;
}
void c_recursivedirectoryiterator::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count < 1 || count > 2) throw_wrong_arguments("recursivedirectoryiterator::__construct", count, 1, 2, 2);
  if (count <= 1) (t___construct(params[0]));
  else (t___construct(params[0], params[1]));
}
void c_recursivedirectoryiterator::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count < 1 || count > 2) throw_wrong_arguments("recursivedirectoryiterator::__construct", count, 1, 2, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  if (count <= 1) (t___construct(a0), null);
  else (t___construct(a0, a1), null);
}
ObjectData *c_recursivedirectoryiterator::cloneImpl() {
  c_recursivedirectoryiterator *obj = NEW(c_recursivedirectoryiterator)();
  cloneSet(obj);
  return obj;
}
void c_recursivedirectoryiterator::cloneSet(c_recursivedirectoryiterator *clone) {
  c_directoryiterator::cloneSet(clone);
}
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_recursivedirectoryiterator
Variant c_recursivedirectoryiterator::o_invoke(const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 127) {
    case 6:
      HASH_GUARD(0x6B2EAD4A44934786LL, getrealpath) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getrealpath", 0, 1);
        return (t_getrealpath());
      }
      HASH_GUARD(0x1D3B08AA0AF50F06LL, gettype) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::gettype", 0, 1);
        return (t_gettype());
      }
      break;
    case 8:
      HASH_GUARD(0x1ADA46FCC8EFEC08LL, isdir) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isdir", 0, 1);
        return (t_isdir());
      }
      break;
    case 9:
      HASH_GUARD(0x430BA7B88ED3A809LL, getsubpathname) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::getsubpathname", 0, 1);
        return (t_getsubpathname());
      }
      break;
    case 14:
      HASH_GUARD(0x32ABF385AD4BE48ELL, getowner) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getowner", 0, 1);
        return (t_getowner());
      }
      break;
    case 15:
      HASH_GUARD(0x732EC1BDA8EC520FLL, getchildren) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::getchildren", 0, 1);
        return (t_getchildren());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::__tostring", 0, 1);
        return (t___tostring());
      }
      break;
    case 21:
      HASH_GUARD(0x40044334DA397C15LL, haschildren) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::haschildren", 0, 1);
        return (t_haschildren());
      }
      break;
    case 28:
      HASH_GUARD(0x572E108C6731E29CLL, getbasename) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::getbasename", 1, 1);
        if (count <= 0) return (t_getbasename());
        return (t_getbasename(params[0]));
      }
      break;
    case 29:
      HASH_GUARD(0x4C43532D60465F1DLL, isfile) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isfile", 0, 1);
        return (t_isfile());
      }
      break;
    case 31:
      HASH_GUARD(0x4BC19906B553C59FLL, getatime) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getatime", 0, 1);
        return (t_getatime());
      }
      break;
    case 37:
      HASH_GUARD(0x5948407CA9CC4DA5LL, setfileclass) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::setfileclass", 1, 1);
        if (count <= 0) return (t_setfileclass());
        return (t_setfileclass(params[0]));
      }
      break;
    case 43:
      HASH_GUARD(0x0D6276BAB75513ABLL, getlinktarget) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getlinktarget", 0, 1);
        return (t_getlinktarget());
      }
      break;
    case 47:
      HASH_GUARD(0x5640A4755D0078AFLL, getctime) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getctime", 0, 1);
        return (t_getctime());
      }
      break;
    case 53:
      HASH_GUARD(0x337DEC2D48BDFE35LL, openfile) {
        if (count > 3) return throw_toomany_arguments("splfileinfo::openfile", 3, 1);
        if (count <= 0) return (t_openfile());
        if (count == 1) return (t_openfile(params[0]));
        if (count == 2) return (t_openfile(params[0], params[1]));
        return (t_openfile(params[0], params[1], params[2]));
      }
      break;
    case 56:
      HASH_GUARD(0x3C6D50F3BB8102B8LL, next) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::next", 0, 1);
        return (t_next());
      }
      break;
    case 63:
      HASH_GUARD(0x04C642C6C162243FLL, getpath) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getpath", 0, 1);
        return (t_getpath());
      }
      HASH_GUARD(0x7D50FA42F9D4923FLL, getfileinfo) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::getfileinfo", 1, 1);
        if (count <= 0) return (t_getfileinfo());
        return (t_getfileinfo(params[0]));
      }
      break;
    case 68:
      HASH_GUARD(0x6413CB5154808C44LL, valid) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::valid", 0, 1);
        return (t_valid());
      }
      break;
    case 69:
      HASH_GUARD(0x5676046725D241C5LL, setinfoclass) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::setinfoclass", 1, 1);
        if (count <= 0) return (t_setinfoclass());
        return (t_setinfoclass(params[0]));
      }
      break;
    case 74:
      HASH_GUARD(0x01A800A73CD2604ALL, getinode) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getinode", 0, 1);
        return (t_getinode());
      }
      break;
    case 77:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getfilename", 0, 1);
        return (t_getfilename());
      }
      break;
    case 79:
      HASH_GUARD(0x569FC7D8E9401C4FLL, isreadable) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isreadable", 0, 1);
        return (t_isreadable());
      }
      break;
    case 81:
      HASH_GUARD(0x56EDB60C824E8C51LL, key) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::key", 0, 1);
        return (t_key());
      }
      break;
    case 88:
      HASH_GUARD(0x1D5801BB72C51C58LL, islink) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::islink", 0, 1);
        return (t_islink());
      }
      break;
    case 92:
      HASH_GUARD(0x5B3A4A72846B21DCLL, current) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::current", 0, 1);
        return (t_current());
      }
      break;
    case 95:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count < 1 || count > 2) return throw_wrong_arguments("recursivedirectoryiterator::__construct", count, 1, 2, 2);
        if (count <= 1) return (t___construct(params[0]), null);
        return (t___construct(params[0], params[1]), null);
      }
      break;
    case 99:
      HASH_GUARD(0x638F2A56B8463A63LL, iswritable) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::iswritable", 0, 1);
        return (t_iswritable());
      }
      break;
    case 103:
      HASH_GUARD(0x00DCC39EDB16AFE7LL, getpathinfo) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::getpathinfo", 1, 1);
        if (count <= 0) return (t_getpathinfo());
        return (t_getpathinfo(params[0]));
      }
      HASH_GUARD(0x7EF5445C77054C67LL, seek) {
        if (count != 1) return throw_wrong_arguments("recursivedirectoryiterator::seek", count, 1, 1, 1);
        return (t_seek(params[0]));
      }
      break;
    case 106:
      HASH_GUARD(0x0F9EDEC32565D86ALL, getgroup) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getgroup", 0, 1);
        return (t_getgroup());
      }
      HASH_GUARD(0x6615B5496D03A6EALL, getsize) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getsize", 0, 1);
        return (t_getsize());
      }
      HASH_GUARD(0x1670096FDE27AF6ALL, rewind) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::rewind", 0, 1);
        return (t_rewind());
      }
      break;
    case 116:
      HASH_GUARD(0x265BDC54C992EE74LL, getmtime) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getmtime", 0, 1);
        return (t_getmtime());
      }
      HASH_GUARD(0x08D1EA51B78DA5F4LL, isdot) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::isdot", 0, 1);
        return (t_isdot());
      }
      break;
    case 120:
      HASH_GUARD(0x25070641C3D924F8LL, getpathname) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getpathname", 0, 1);
        return (t_getpathname());
      }
      break;
    case 122:
      HASH_GUARD(0x3786834B2A0CCB7ALL, isexecutable) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isexecutable", 0, 1);
        return (t_isexecutable());
      }
      break;
    case 123:
      HASH_GUARD(0x7CF26A0E76B5E27BLL, getsubpath) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::getsubpath", 0, 1);
        return (t_getsubpath());
      }
      break;
    case 125:
      HASH_GUARD(0x4351578037A06E7DLL, getperms) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getperms", 0, 1);
        return (t_getperms());
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke(s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_recursivedirectoryiterator
Variant c_recursivedirectoryiterator::o_invoke_few_args(const char *s, int64 hash, int count, CVarRef a0, CVarRef a1, CVarRef a2, CVarRef a3, CVarRef a4, CVarRef a5) {
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 127) {
    case 6:
      HASH_GUARD(0x6B2EAD4A44934786LL, getrealpath) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getrealpath", 0, 1);
        return (t_getrealpath());
      }
      HASH_GUARD(0x1D3B08AA0AF50F06LL, gettype) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::gettype", 0, 1);
        return (t_gettype());
      }
      break;
    case 8:
      HASH_GUARD(0x1ADA46FCC8EFEC08LL, isdir) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isdir", 0, 1);
        return (t_isdir());
      }
      break;
    case 9:
      HASH_GUARD(0x430BA7B88ED3A809LL, getsubpathname) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::getsubpathname", 0, 1);
        return (t_getsubpathname());
      }
      break;
    case 14:
      HASH_GUARD(0x32ABF385AD4BE48ELL, getowner) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getowner", 0, 1);
        return (t_getowner());
      }
      break;
    case 15:
      HASH_GUARD(0x732EC1BDA8EC520FLL, getchildren) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::getchildren", 0, 1);
        return (t_getchildren());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::__tostring", 0, 1);
        return (t___tostring());
      }
      break;
    case 21:
      HASH_GUARD(0x40044334DA397C15LL, haschildren) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::haschildren", 0, 1);
        return (t_haschildren());
      }
      break;
    case 28:
      HASH_GUARD(0x572E108C6731E29CLL, getbasename) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::getbasename", 1, 1);
        if (count <= 0) return (t_getbasename());
        return (t_getbasename(a0));
      }
      break;
    case 29:
      HASH_GUARD(0x4C43532D60465F1DLL, isfile) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isfile", 0, 1);
        return (t_isfile());
      }
      break;
    case 31:
      HASH_GUARD(0x4BC19906B553C59FLL, getatime) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getatime", 0, 1);
        return (t_getatime());
      }
      break;
    case 37:
      HASH_GUARD(0x5948407CA9CC4DA5LL, setfileclass) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::setfileclass", 1, 1);
        if (count <= 0) return (t_setfileclass());
        return (t_setfileclass(a0));
      }
      break;
    case 43:
      HASH_GUARD(0x0D6276BAB75513ABLL, getlinktarget) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getlinktarget", 0, 1);
        return (t_getlinktarget());
      }
      break;
    case 47:
      HASH_GUARD(0x5640A4755D0078AFLL, getctime) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getctime", 0, 1);
        return (t_getctime());
      }
      break;
    case 53:
      HASH_GUARD(0x337DEC2D48BDFE35LL, openfile) {
        if (count > 3) return throw_toomany_arguments("splfileinfo::openfile", 3, 1);
        if (count <= 0) return (t_openfile());
        if (count == 1) return (t_openfile(a0));
        if (count == 2) return (t_openfile(a0, a1));
        return (t_openfile(a0, a1, a2));
      }
      break;
    case 56:
      HASH_GUARD(0x3C6D50F3BB8102B8LL, next) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::next", 0, 1);
        return (t_next());
      }
      break;
    case 63:
      HASH_GUARD(0x04C642C6C162243FLL, getpath) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getpath", 0, 1);
        return (t_getpath());
      }
      HASH_GUARD(0x7D50FA42F9D4923FLL, getfileinfo) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::getfileinfo", 1, 1);
        if (count <= 0) return (t_getfileinfo());
        return (t_getfileinfo(a0));
      }
      break;
    case 68:
      HASH_GUARD(0x6413CB5154808C44LL, valid) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::valid", 0, 1);
        return (t_valid());
      }
      break;
    case 69:
      HASH_GUARD(0x5676046725D241C5LL, setinfoclass) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::setinfoclass", 1, 1);
        if (count <= 0) return (t_setinfoclass());
        return (t_setinfoclass(a0));
      }
      break;
    case 74:
      HASH_GUARD(0x01A800A73CD2604ALL, getinode) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getinode", 0, 1);
        return (t_getinode());
      }
      break;
    case 77:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getfilename", 0, 1);
        return (t_getfilename());
      }
      break;
    case 79:
      HASH_GUARD(0x569FC7D8E9401C4FLL, isreadable) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isreadable", 0, 1);
        return (t_isreadable());
      }
      break;
    case 81:
      HASH_GUARD(0x56EDB60C824E8C51LL, key) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::key", 0, 1);
        return (t_key());
      }
      break;
    case 88:
      HASH_GUARD(0x1D5801BB72C51C58LL, islink) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::islink", 0, 1);
        return (t_islink());
      }
      break;
    case 92:
      HASH_GUARD(0x5B3A4A72846B21DCLL, current) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::current", 0, 1);
        return (t_current());
      }
      break;
    case 95:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count < 1 || count > 2) return throw_wrong_arguments("recursivedirectoryiterator::__construct", count, 1, 2, 2);
        if (count <= 1) return (t___construct(a0), null);
        return (t___construct(a0, a1), null);
      }
      break;
    case 99:
      HASH_GUARD(0x638F2A56B8463A63LL, iswritable) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::iswritable", 0, 1);
        return (t_iswritable());
      }
      break;
    case 103:
      HASH_GUARD(0x00DCC39EDB16AFE7LL, getpathinfo) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::getpathinfo", 1, 1);
        if (count <= 0) return (t_getpathinfo());
        return (t_getpathinfo(a0));
      }
      HASH_GUARD(0x7EF5445C77054C67LL, seek) {
        if (count != 1) return throw_wrong_arguments("recursivedirectoryiterator::seek", count, 1, 1, 1);
        return (t_seek(a0));
      }
      break;
    case 106:
      HASH_GUARD(0x0F9EDEC32565D86ALL, getgroup) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getgroup", 0, 1);
        return (t_getgroup());
      }
      HASH_GUARD(0x6615B5496D03A6EALL, getsize) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getsize", 0, 1);
        return (t_getsize());
      }
      HASH_GUARD(0x1670096FDE27AF6ALL, rewind) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::rewind", 0, 1);
        return (t_rewind());
      }
      break;
    case 116:
      HASH_GUARD(0x265BDC54C992EE74LL, getmtime) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getmtime", 0, 1);
        return (t_getmtime());
      }
      HASH_GUARD(0x08D1EA51B78DA5F4LL, isdot) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::isdot", 0, 1);
        return (t_isdot());
      }
      break;
    case 120:
      HASH_GUARD(0x25070641C3D924F8LL, getpathname) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getpathname", 0, 1);
        return (t_getpathname());
      }
      break;
    case 122:
      HASH_GUARD(0x3786834B2A0CCB7ALL, isexecutable) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isexecutable", 0, 1);
        return (t_isexecutable());
      }
      break;
    case 123:
      HASH_GUARD(0x7CF26A0E76B5E27BLL, getsubpath) {
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::getsubpath", 0, 1);
        return (t_getsubpath());
      }
      break;
    case 125:
      HASH_GUARD(0x4351578037A06E7DLL, getperms) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getperms", 0, 1);
        return (t_getperms());
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke_few_args(s, hash, count, a0, a1, a2, a3, a4, a5);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_recursivedirectoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_recursivedirectoryiterator
Variant c_recursivedirectoryiterator::os_invoke(const char *c, const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
  return c_ObjectData::os_invoke(c, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_recursivedirectoryiterator
Variant c_recursivedirectoryiterator::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 127) {
    case 6:
      HASH_GUARD(0x6B2EAD4A44934786LL, getrealpath) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getrealpath", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getrealpath());
      }
      HASH_GUARD(0x1D3B08AA0AF50F06LL, gettype) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::gettype", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_gettype());
      }
      break;
    case 8:
      HASH_GUARD(0x1ADA46FCC8EFEC08LL, isdir) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::isdir", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isdir());
      }
      break;
    case 9:
      HASH_GUARD(0x430BA7B88ED3A809LL, getsubpathname) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::getsubpathname", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getsubpathname());
      }
      break;
    case 14:
      HASH_GUARD(0x32ABF385AD4BE48ELL, getowner) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getowner", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getowner());
      }
      break;
    case 15:
      HASH_GUARD(0x732EC1BDA8EC520FLL, getchildren) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::getchildren", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getchildren());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::__tostring", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 21:
      HASH_GUARD(0x40044334DA397C15LL, haschildren) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::haschildren", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_haschildren());
      }
      break;
    case 28:
      HASH_GUARD(0x572E108C6731E29CLL, getbasename) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("splfileinfo::getbasename", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_getbasename());
        else return (t_getbasename(a0));
      }
      break;
    case 29:
      HASH_GUARD(0x4C43532D60465F1DLL, isfile) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::isfile", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isfile());
      }
      break;
    case 31:
      HASH_GUARD(0x4BC19906B553C59FLL, getatime) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getatime", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getatime());
      }
      break;
    case 37:
      HASH_GUARD(0x5948407CA9CC4DA5LL, setfileclass) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("splfileinfo::setfileclass", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_setfileclass());
        else return (t_setfileclass(a0));
      }
      break;
    case 43:
      HASH_GUARD(0x0D6276BAB75513ABLL, getlinktarget) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getlinktarget", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getlinktarget());
      }
      break;
    case 47:
      HASH_GUARD(0x5640A4755D0078AFLL, getctime) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getctime", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getctime());
      }
      break;
    case 53:
      HASH_GUARD(0x337DEC2D48BDFE35LL, openfile) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 3) return throw_toomany_arguments("splfileinfo::openfile", 3, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_openfile());
        else if (count == 1) return (t_openfile(a0));
        else if (count == 2) return (t_openfile(a0, a1));
        else return (t_openfile(a0, a1, a2));
      }
      break;
    case 56:
      HASH_GUARD(0x3C6D50F3BB8102B8LL, next) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::next", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_next());
      }
      break;
    case 63:
      HASH_GUARD(0x04C642C6C162243FLL, getpath) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getpath", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getpath());
      }
      HASH_GUARD(0x7D50FA42F9D4923FLL, getfileinfo) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("splfileinfo::getfileinfo", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_getfileinfo());
        else return (t_getfileinfo(a0));
      }
      break;
    case 68:
      HASH_GUARD(0x6413CB5154808C44LL, valid) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::valid", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_valid());
      }
      break;
    case 69:
      HASH_GUARD(0x5676046725D241C5LL, setinfoclass) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("splfileinfo::setinfoclass", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_setinfoclass());
        else return (t_setinfoclass(a0));
      }
      break;
    case 74:
      HASH_GUARD(0x01A800A73CD2604ALL, getinode) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getinode", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinode());
      }
      break;
    case 77:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getfilename", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfilename());
      }
      break;
    case 79:
      HASH_GUARD(0x569FC7D8E9401C4FLL, isreadable) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::isreadable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isreadable());
      }
      break;
    case 81:
      HASH_GUARD(0x56EDB60C824E8C51LL, key) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::key", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_key());
      }
      break;
    case 88:
      HASH_GUARD(0x1D5801BB72C51C58LL, islink) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::islink", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_islink());
      }
      break;
    case 92:
      HASH_GUARD(0x5B3A4A72846B21DCLL, current) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::current", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_current());
      }
      break;
    case 95:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        Variant a0;
        Variant a1;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count < 1 || count > 2) return throw_wrong_arguments("recursivedirectoryiterator::__construct", count, 1, 2, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 1) return (t___construct(a0), null);
        else return (t___construct(a0, a1), null);
      }
      break;
    case 99:
      HASH_GUARD(0x638F2A56B8463A63LL, iswritable) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::iswritable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_iswritable());
      }
      break;
    case 103:
      HASH_GUARD(0x00DCC39EDB16AFE7LL, getpathinfo) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("splfileinfo::getpathinfo", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_getpathinfo());
        else return (t_getpathinfo(a0));
      }
      HASH_GUARD(0x7EF5445C77054C67LL, seek) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("recursivedirectoryiterator::seek", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_seek(a0));
      }
      break;
    case 106:
      HASH_GUARD(0x0F9EDEC32565D86ALL, getgroup) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getgroup", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getgroup());
      }
      HASH_GUARD(0x6615B5496D03A6EALL, getsize) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getsize", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getsize());
      }
      HASH_GUARD(0x1670096FDE27AF6ALL, rewind) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::rewind", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_rewind());
      }
      break;
    case 116:
      HASH_GUARD(0x265BDC54C992EE74LL, getmtime) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getmtime", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmtime());
      }
      HASH_GUARD(0x08D1EA51B78DA5F4LL, isdot) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("directoryiterator::isdot", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isdot());
      }
      break;
    case 120:
      HASH_GUARD(0x25070641C3D924F8LL, getpathname) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getpathname", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getpathname());
      }
      break;
    case 122:
      HASH_GUARD(0x3786834B2A0CCB7ALL, isexecutable) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::isexecutable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isexecutable());
      }
      break;
    case 123:
      HASH_GUARD(0x7CF26A0E76B5E27BLL, getsubpath) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursivedirectoryiterator::getsubpath", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getsubpath());
      }
      break;
    case 125:
      HASH_GUARD(0x4351578037A06E7DLL, getperms) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getperms", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getperms());
      }
      break;
    default:
      break;
  }
  return c_directoryiterator::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_recursivedirectoryiterator::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  return c_directoryiterator::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
struct ObjectStaticCallbacks cw_recursivedirectoryiterator = {
  c_recursivedirectoryiterator::os_getInit,
  c_recursivedirectoryiterator::os_get,
  c_recursivedirectoryiterator::os_lval,
  c_recursivedirectoryiterator::os_invoke,
  c_recursivedirectoryiterator::os_constant,
};
void c_recursivedirectoryiterator::init() {
  c_directoryiterator::init();
}
/* SRC: classes/iterator.php line 218 */
void c_recursivedirectoryiterator::t___construct(Variant v_path, Variant v_flags //  = 16LL /* recursivedirectoryiterator::CURRENT_AS_FILEINFO */
) {
  INSTANCE_METHOD_INJECTION(RecursiveDirectoryIterator, RecursiveDirectoryIterator::__construct);
  bool oldInCtor = gasInCtor(true);
  x_hphp_recursivedirectoryiterator___construct(GET_THIS(), toString(v_path), toInt64(v_flags));
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/iterator.php line 223 */
Variant c_recursivedirectoryiterator::t_current() {
  INSTANCE_METHOD_INJECTION(RecursiveDirectoryIterator, RecursiveDirectoryIterator::current);
  return x_hphp_recursivedirectoryiterator_current(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 227 */
Variant c_recursivedirectoryiterator::t_key() {
  INSTANCE_METHOD_INJECTION(RecursiveDirectoryIterator, RecursiveDirectoryIterator::key);
  return x_hphp_recursivedirectoryiterator_key(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 231 */
Variant c_recursivedirectoryiterator::t_next() {
  INSTANCE_METHOD_INJECTION(RecursiveDirectoryIterator, RecursiveDirectoryIterator::next);
  return (x_hphp_recursivedirectoryiterator_next(GET_THIS()), null);
} /* function */
/* SRC: classes/iterator.php line 235 */
Variant c_recursivedirectoryiterator::t_rewind() {
  INSTANCE_METHOD_INJECTION(RecursiveDirectoryIterator, RecursiveDirectoryIterator::rewind);
  return (x_hphp_recursivedirectoryiterator_rewind(GET_THIS()), null);
} /* function */
/* SRC: classes/iterator.php line 239 */
Variant c_recursivedirectoryiterator::t_seek(CVarRef v_position) {
  INSTANCE_METHOD_INJECTION(RecursiveDirectoryIterator, RecursiveDirectoryIterator::seek);
  return (invoke("hphp_recursivedirectoryiterator_seek", Array(ArrayInit(1, true).setRef(0, GET_THIS()).create()), 0x09A98E99D51E8C2BLL), null);
} /* function */
/* SRC: classes/iterator.php line 243 */
String c_recursivedirectoryiterator::t___tostring() {
  INSTANCE_METHOD_INJECTION(RecursiveDirectoryIterator, RecursiveDirectoryIterator::__toString);
  return x_hphp_recursivedirectoryiterator___tostring(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 247 */
bool c_recursivedirectoryiterator::t_valid() {
  INSTANCE_METHOD_INJECTION(RecursiveDirectoryIterator, RecursiveDirectoryIterator::valid);
  return x_hphp_recursivedirectoryiterator_valid(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 251 */
bool c_recursivedirectoryiterator::t_haschildren() {
  INSTANCE_METHOD_INJECTION(RecursiveDirectoryIterator, RecursiveDirectoryIterator::hasChildren);
  return x_hphp_recursivedirectoryiterator_haschildren(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 255 */
Object c_recursivedirectoryiterator::t_getchildren() {
  INSTANCE_METHOD_INJECTION(RecursiveDirectoryIterator, RecursiveDirectoryIterator::getChildren);
  return x_hphp_recursivedirectoryiterator_getchildren(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 259 */
String c_recursivedirectoryiterator::t_getsubpath() {
  INSTANCE_METHOD_INJECTION(RecursiveDirectoryIterator, RecursiveDirectoryIterator::getSubPath);
  return x_hphp_recursivedirectoryiterator_getsubpath(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 263 */
String c_recursivedirectoryiterator::t_getsubpathname() {
  INSTANCE_METHOD_INJECTION(RecursiveDirectoryIterator, RecursiveDirectoryIterator::getSubPathname);
  return x_hphp_recursivedirectoryiterator_getsubpathname(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 170 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_directoryiterator
Variant c_directoryiterator::os_getInit(const char *s, int64 hash) {
  return c_splfileinfo::os_getInit(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_directoryiterator
Variant c_directoryiterator::os_get(const char *s, int64 hash) {
  return c_splfileinfo::os_get(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_directoryiterator
Variant &c_directoryiterator::os_lval(const char *s, int64 hash) {
  return c_splfileinfo::os_lval(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_directoryiterator
void c_directoryiterator::o_get(Array &props) const {
  c_splfileinfo::o_get(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_get_directoryiterator
Variant c_directoryiterator::o_get(CStrRef prop, int64 phash, bool error /* = true */, const char *context /* = NULL */) {
  return c_directoryiterator::o_getPublic(prop, phash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_get_PUBLIC_directoryiterator
Variant c_directoryiterator::o_getPublic(CStrRef s, int64 hash, bool error /* = true */) {
  return c_splfileinfo::o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PUBLIC_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_get_PRIVATE_directoryiterator
Variant c_directoryiterator::o_getPrivate(CStrRef s, int64 hash, bool error /* = true */) {
  return o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_directoryiterator
bool c_directoryiterator::o_exists(CStrRef prop, int64 phash, const char *context /* = NULL */) const {
  return c_directoryiterator::o_existsPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_directoryiterator
bool c_directoryiterator::o_existsPublic(CStrRef s, int64 hash) const {
  return c_splfileinfo::o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_directoryiterator
bool c_directoryiterator::o_existsPrivate(CStrRef s, int64 hash) const {
  return o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_set_directoryiterator
Variant c_directoryiterator::o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit /* = false */, const char *context /* = NULL */) {
  return c_directoryiterator::o_setPublic(prop, phash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_set_PUBLIC_directoryiterator
Variant c_directoryiterator::o_setPublic(CStrRef s, int64 hash, CVarRef v, bool forInit /* = false */) {
  return c_splfileinfo::o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PUBLIC_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_set_PRIVATE_directoryiterator
Variant c_directoryiterator::o_setPrivate(CStrRef s, int64 hash, CVarRef v, bool forInit /* = false */) {
  return o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PRIVATE_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_directoryiterator
Variant& c_directoryiterator::o_lval(CStrRef prop, int64 phash, const char *context /* = NULL */) {
  return c_directoryiterator::o_lvalPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_directoryiterator
Variant& c_directoryiterator::o_lvalPublic(CStrRef s, int64 hash) {
  return c_splfileinfo::o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_directoryiterator
Variant& c_directoryiterator::o_lvalPrivate(CStrRef s, int64 hash) {
  return o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_directoryiterator
Variant c_directoryiterator::os_constant(const char *s) {
  return c_splfileinfo::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_directoryiterator
IMPLEMENT_CLASS(directoryiterator)
c_directoryiterator *c_directoryiterator::create(Variant v_path) {
  CountableHelper h(this);
  init();
  t___construct(v_path);
  return this;
}
ObjectData *c_directoryiterator::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count != 1) throw_wrong_arguments("directoryiterator::__construct", count, 1, 1, 2);
    (t___construct(params[0]));
  }
  return this;
}
void c_directoryiterator::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("directoryiterator::__construct", count, 1, 1, 2);
  (t___construct(params[0]));
}
void c_directoryiterator::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count != 1) throw_wrong_arguments("directoryiterator::__construct", count, 1, 1, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  (t___construct(a0), null);
}
ObjectData *c_directoryiterator::cloneImpl() {
  c_directoryiterator *obj = NEW(c_directoryiterator)();
  cloneSet(obj);
  return obj;
}
void c_directoryiterator::cloneSet(c_directoryiterator *clone) {
  c_splfileinfo::cloneSet(clone);
}
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_directoryiterator
Variant c_directoryiterator::o_invoke(const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 127) {
    case 6:
      HASH_GUARD(0x6B2EAD4A44934786LL, getrealpath) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getrealpath", 0, 1);
        return (t_getrealpath());
      }
      HASH_GUARD(0x1D3B08AA0AF50F06LL, gettype) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::gettype", 0, 1);
        return (t_gettype());
      }
      break;
    case 8:
      HASH_GUARD(0x1ADA46FCC8EFEC08LL, isdir) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isdir", 0, 1);
        return (t_isdir());
      }
      break;
    case 14:
      HASH_GUARD(0x32ABF385AD4BE48ELL, getowner) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getowner", 0, 1);
        return (t_getowner());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::__tostring", 0, 1);
        return (t___tostring());
      }
      break;
    case 28:
      HASH_GUARD(0x572E108C6731E29CLL, getbasename) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::getbasename", 1, 1);
        if (count <= 0) return (t_getbasename());
        return (t_getbasename(params[0]));
      }
      break;
    case 29:
      HASH_GUARD(0x4C43532D60465F1DLL, isfile) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isfile", 0, 1);
        return (t_isfile());
      }
      break;
    case 31:
      HASH_GUARD(0x4BC19906B553C59FLL, getatime) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getatime", 0, 1);
        return (t_getatime());
      }
      break;
    case 37:
      HASH_GUARD(0x5948407CA9CC4DA5LL, setfileclass) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::setfileclass", 1, 1);
        if (count <= 0) return (t_setfileclass());
        return (t_setfileclass(params[0]));
      }
      break;
    case 43:
      HASH_GUARD(0x0D6276BAB75513ABLL, getlinktarget) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getlinktarget", 0, 1);
        return (t_getlinktarget());
      }
      break;
    case 47:
      HASH_GUARD(0x5640A4755D0078AFLL, getctime) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getctime", 0, 1);
        return (t_getctime());
      }
      break;
    case 53:
      HASH_GUARD(0x337DEC2D48BDFE35LL, openfile) {
        if (count > 3) return throw_toomany_arguments("splfileinfo::openfile", 3, 1);
        if (count <= 0) return (t_openfile());
        if (count == 1) return (t_openfile(params[0]));
        if (count == 2) return (t_openfile(params[0], params[1]));
        return (t_openfile(params[0], params[1], params[2]));
      }
      break;
    case 56:
      HASH_GUARD(0x3C6D50F3BB8102B8LL, next) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::next", 0, 1);
        return (t_next());
      }
      break;
    case 63:
      HASH_GUARD(0x04C642C6C162243FLL, getpath) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getpath", 0, 1);
        return (t_getpath());
      }
      HASH_GUARD(0x7D50FA42F9D4923FLL, getfileinfo) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::getfileinfo", 1, 1);
        if (count <= 0) return (t_getfileinfo());
        return (t_getfileinfo(params[0]));
      }
      break;
    case 68:
      HASH_GUARD(0x6413CB5154808C44LL, valid) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::valid", 0, 1);
        return (t_valid());
      }
      break;
    case 69:
      HASH_GUARD(0x5676046725D241C5LL, setinfoclass) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::setinfoclass", 1, 1);
        if (count <= 0) return (t_setinfoclass());
        return (t_setinfoclass(params[0]));
      }
      break;
    case 74:
      HASH_GUARD(0x01A800A73CD2604ALL, getinode) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getinode", 0, 1);
        return (t_getinode());
      }
      break;
    case 77:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getfilename", 0, 1);
        return (t_getfilename());
      }
      break;
    case 79:
      HASH_GUARD(0x569FC7D8E9401C4FLL, isreadable) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isreadable", 0, 1);
        return (t_isreadable());
      }
      break;
    case 81:
      HASH_GUARD(0x56EDB60C824E8C51LL, key) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::key", 0, 1);
        return (t_key());
      }
      break;
    case 88:
      HASH_GUARD(0x1D5801BB72C51C58LL, islink) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::islink", 0, 1);
        return (t_islink());
      }
      break;
    case 92:
      HASH_GUARD(0x5B3A4A72846B21DCLL, current) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::current", 0, 1);
        return (t_current());
      }
      break;
    case 95:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 1) return throw_wrong_arguments("directoryiterator::__construct", count, 1, 1, 2);
        return (t___construct(params[0]), null);
      }
      break;
    case 99:
      HASH_GUARD(0x638F2A56B8463A63LL, iswritable) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::iswritable", 0, 1);
        return (t_iswritable());
      }
      break;
    case 103:
      HASH_GUARD(0x00DCC39EDB16AFE7LL, getpathinfo) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::getpathinfo", 1, 1);
        if (count <= 0) return (t_getpathinfo());
        return (t_getpathinfo(params[0]));
      }
      HASH_GUARD(0x7EF5445C77054C67LL, seek) {
        if (count != 1) return throw_wrong_arguments("directoryiterator::seek", count, 1, 1, 1);
        return (t_seek(params[0]));
      }
      break;
    case 106:
      HASH_GUARD(0x0F9EDEC32565D86ALL, getgroup) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getgroup", 0, 1);
        return (t_getgroup());
      }
      HASH_GUARD(0x6615B5496D03A6EALL, getsize) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getsize", 0, 1);
        return (t_getsize());
      }
      HASH_GUARD(0x1670096FDE27AF6ALL, rewind) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::rewind", 0, 1);
        return (t_rewind());
      }
      break;
    case 116:
      HASH_GUARD(0x265BDC54C992EE74LL, getmtime) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getmtime", 0, 1);
        return (t_getmtime());
      }
      HASH_GUARD(0x08D1EA51B78DA5F4LL, isdot) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::isdot", 0, 1);
        return (t_isdot());
      }
      break;
    case 120:
      HASH_GUARD(0x25070641C3D924F8LL, getpathname) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getpathname", 0, 1);
        return (t_getpathname());
      }
      break;
    case 122:
      HASH_GUARD(0x3786834B2A0CCB7ALL, isexecutable) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isexecutable", 0, 1);
        return (t_isexecutable());
      }
      break;
    case 125:
      HASH_GUARD(0x4351578037A06E7DLL, getperms) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getperms", 0, 1);
        return (t_getperms());
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke(s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_directoryiterator
Variant c_directoryiterator::o_invoke_few_args(const char *s, int64 hash, int count, CVarRef a0, CVarRef a1, CVarRef a2, CVarRef a3, CVarRef a4, CVarRef a5) {
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 127) {
    case 6:
      HASH_GUARD(0x6B2EAD4A44934786LL, getrealpath) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getrealpath", 0, 1);
        return (t_getrealpath());
      }
      HASH_GUARD(0x1D3B08AA0AF50F06LL, gettype) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::gettype", 0, 1);
        return (t_gettype());
      }
      break;
    case 8:
      HASH_GUARD(0x1ADA46FCC8EFEC08LL, isdir) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isdir", 0, 1);
        return (t_isdir());
      }
      break;
    case 14:
      HASH_GUARD(0x32ABF385AD4BE48ELL, getowner) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getowner", 0, 1);
        return (t_getowner());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::__tostring", 0, 1);
        return (t___tostring());
      }
      break;
    case 28:
      HASH_GUARD(0x572E108C6731E29CLL, getbasename) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::getbasename", 1, 1);
        if (count <= 0) return (t_getbasename());
        return (t_getbasename(a0));
      }
      break;
    case 29:
      HASH_GUARD(0x4C43532D60465F1DLL, isfile) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isfile", 0, 1);
        return (t_isfile());
      }
      break;
    case 31:
      HASH_GUARD(0x4BC19906B553C59FLL, getatime) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getatime", 0, 1);
        return (t_getatime());
      }
      break;
    case 37:
      HASH_GUARD(0x5948407CA9CC4DA5LL, setfileclass) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::setfileclass", 1, 1);
        if (count <= 0) return (t_setfileclass());
        return (t_setfileclass(a0));
      }
      break;
    case 43:
      HASH_GUARD(0x0D6276BAB75513ABLL, getlinktarget) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getlinktarget", 0, 1);
        return (t_getlinktarget());
      }
      break;
    case 47:
      HASH_GUARD(0x5640A4755D0078AFLL, getctime) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getctime", 0, 1);
        return (t_getctime());
      }
      break;
    case 53:
      HASH_GUARD(0x337DEC2D48BDFE35LL, openfile) {
        if (count > 3) return throw_toomany_arguments("splfileinfo::openfile", 3, 1);
        if (count <= 0) return (t_openfile());
        if (count == 1) return (t_openfile(a0));
        if (count == 2) return (t_openfile(a0, a1));
        return (t_openfile(a0, a1, a2));
      }
      break;
    case 56:
      HASH_GUARD(0x3C6D50F3BB8102B8LL, next) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::next", 0, 1);
        return (t_next());
      }
      break;
    case 63:
      HASH_GUARD(0x04C642C6C162243FLL, getpath) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getpath", 0, 1);
        return (t_getpath());
      }
      HASH_GUARD(0x7D50FA42F9D4923FLL, getfileinfo) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::getfileinfo", 1, 1);
        if (count <= 0) return (t_getfileinfo());
        return (t_getfileinfo(a0));
      }
      break;
    case 68:
      HASH_GUARD(0x6413CB5154808C44LL, valid) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::valid", 0, 1);
        return (t_valid());
      }
      break;
    case 69:
      HASH_GUARD(0x5676046725D241C5LL, setinfoclass) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::setinfoclass", 1, 1);
        if (count <= 0) return (t_setinfoclass());
        return (t_setinfoclass(a0));
      }
      break;
    case 74:
      HASH_GUARD(0x01A800A73CD2604ALL, getinode) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getinode", 0, 1);
        return (t_getinode());
      }
      break;
    case 77:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getfilename", 0, 1);
        return (t_getfilename());
      }
      break;
    case 79:
      HASH_GUARD(0x569FC7D8E9401C4FLL, isreadable) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isreadable", 0, 1);
        return (t_isreadable());
      }
      break;
    case 81:
      HASH_GUARD(0x56EDB60C824E8C51LL, key) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::key", 0, 1);
        return (t_key());
      }
      break;
    case 88:
      HASH_GUARD(0x1D5801BB72C51C58LL, islink) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::islink", 0, 1);
        return (t_islink());
      }
      break;
    case 92:
      HASH_GUARD(0x5B3A4A72846B21DCLL, current) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::current", 0, 1);
        return (t_current());
      }
      break;
    case 95:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count != 1) return throw_wrong_arguments("directoryiterator::__construct", count, 1, 1, 2);
        return (t___construct(a0), null);
      }
      break;
    case 99:
      HASH_GUARD(0x638F2A56B8463A63LL, iswritable) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::iswritable", 0, 1);
        return (t_iswritable());
      }
      break;
    case 103:
      HASH_GUARD(0x00DCC39EDB16AFE7LL, getpathinfo) {
        if (count > 1) return throw_toomany_arguments("splfileinfo::getpathinfo", 1, 1);
        if (count <= 0) return (t_getpathinfo());
        return (t_getpathinfo(a0));
      }
      HASH_GUARD(0x7EF5445C77054C67LL, seek) {
        if (count != 1) return throw_wrong_arguments("directoryiterator::seek", count, 1, 1, 1);
        return (t_seek(a0));
      }
      break;
    case 106:
      HASH_GUARD(0x0F9EDEC32565D86ALL, getgroup) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getgroup", 0, 1);
        return (t_getgroup());
      }
      HASH_GUARD(0x6615B5496D03A6EALL, getsize) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getsize", 0, 1);
        return (t_getsize());
      }
      HASH_GUARD(0x1670096FDE27AF6ALL, rewind) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::rewind", 0, 1);
        return (t_rewind());
      }
      break;
    case 116:
      HASH_GUARD(0x265BDC54C992EE74LL, getmtime) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getmtime", 0, 1);
        return (t_getmtime());
      }
      HASH_GUARD(0x08D1EA51B78DA5F4LL, isdot) {
        if (count > 0) return throw_toomany_arguments("directoryiterator::isdot", 0, 1);
        return (t_isdot());
      }
      break;
    case 120:
      HASH_GUARD(0x25070641C3D924F8LL, getpathname) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getpathname", 0, 1);
        return (t_getpathname());
      }
      break;
    case 122:
      HASH_GUARD(0x3786834B2A0CCB7ALL, isexecutable) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::isexecutable", 0, 1);
        return (t_isexecutable());
      }
      break;
    case 125:
      HASH_GUARD(0x4351578037A06E7DLL, getperms) {
        if (count > 0) return throw_toomany_arguments("splfileinfo::getperms", 0, 1);
        return (t_getperms());
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke_few_args(s, hash, count, a0, a1, a2, a3, a4, a5);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_directoryiterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_directoryiterator
Variant c_directoryiterator::os_invoke(const char *c, const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
  return c_ObjectData::os_invoke(c, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_directoryiterator
Variant c_directoryiterator::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 127) {
    case 6:
      HASH_GUARD(0x6B2EAD4A44934786LL, getrealpath) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getrealpath", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getrealpath());
      }
      HASH_GUARD(0x1D3B08AA0AF50F06LL, gettype) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::gettype", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_gettype());
      }
      break;
    case 8:
      HASH_GUARD(0x1ADA46FCC8EFEC08LL, isdir) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::isdir", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isdir());
      }
      break;
    case 14:
      HASH_GUARD(0x32ABF385AD4BE48ELL, getowner) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getowner", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getowner());
      }
      break;
    case 19:
      HASH_GUARD(0x642C2D2994B34A13LL, __tostring) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("directoryiterator::__tostring", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___tostring());
      }
      break;
    case 28:
      HASH_GUARD(0x572E108C6731E29CLL, getbasename) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("splfileinfo::getbasename", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_getbasename());
        else return (t_getbasename(a0));
      }
      break;
    case 29:
      HASH_GUARD(0x4C43532D60465F1DLL, isfile) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::isfile", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isfile());
      }
      break;
    case 31:
      HASH_GUARD(0x4BC19906B553C59FLL, getatime) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getatime", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getatime());
      }
      break;
    case 37:
      HASH_GUARD(0x5948407CA9CC4DA5LL, setfileclass) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("splfileinfo::setfileclass", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_setfileclass());
        else return (t_setfileclass(a0));
      }
      break;
    case 43:
      HASH_GUARD(0x0D6276BAB75513ABLL, getlinktarget) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getlinktarget", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getlinktarget());
      }
      break;
    case 47:
      HASH_GUARD(0x5640A4755D0078AFLL, getctime) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getctime", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getctime());
      }
      break;
    case 53:
      HASH_GUARD(0x337DEC2D48BDFE35LL, openfile) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 3) return throw_toomany_arguments("splfileinfo::openfile", 3, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_openfile());
        else if (count == 1) return (t_openfile(a0));
        else if (count == 2) return (t_openfile(a0, a1));
        else return (t_openfile(a0, a1, a2));
      }
      break;
    case 56:
      HASH_GUARD(0x3C6D50F3BB8102B8LL, next) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("directoryiterator::next", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_next());
      }
      break;
    case 63:
      HASH_GUARD(0x04C642C6C162243FLL, getpath) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getpath", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getpath());
      }
      HASH_GUARD(0x7D50FA42F9D4923FLL, getfileinfo) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("splfileinfo::getfileinfo", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_getfileinfo());
        else return (t_getfileinfo(a0));
      }
      break;
    case 68:
      HASH_GUARD(0x6413CB5154808C44LL, valid) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("directoryiterator::valid", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_valid());
      }
      break;
    case 69:
      HASH_GUARD(0x5676046725D241C5LL, setinfoclass) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("splfileinfo::setinfoclass", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_setinfoclass());
        else return (t_setinfoclass(a0));
      }
      break;
    case 74:
      HASH_GUARD(0x01A800A73CD2604ALL, getinode) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getinode", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinode());
      }
      break;
    case 77:
      HASH_GUARD(0x1930CE336D39474DLL, getfilename) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getfilename", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getfilename());
      }
      break;
    case 79:
      HASH_GUARD(0x569FC7D8E9401C4FLL, isreadable) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::isreadable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isreadable());
      }
      break;
    case 81:
      HASH_GUARD(0x56EDB60C824E8C51LL, key) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("directoryiterator::key", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_key());
      }
      break;
    case 88:
      HASH_GUARD(0x1D5801BB72C51C58LL, islink) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::islink", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_islink());
      }
      break;
    case 92:
      HASH_GUARD(0x5B3A4A72846B21DCLL, current) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("directoryiterator::current", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_current());
      }
      break;
    case 95:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("directoryiterator::__construct", count, 1, 1, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t___construct(a0), null);
      }
      break;
    case 99:
      HASH_GUARD(0x638F2A56B8463A63LL, iswritable) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::iswritable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_iswritable());
      }
      break;
    case 103:
      HASH_GUARD(0x00DCC39EDB16AFE7LL, getpathinfo) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 1) return throw_toomany_arguments("splfileinfo::getpathinfo", 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 0) return (t_getpathinfo());
        else return (t_getpathinfo(a0));
      }
      HASH_GUARD(0x7EF5445C77054C67LL, seek) {
        Variant a0;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count != 1) return throw_wrong_arguments("directoryiterator::seek", count, 1, 1, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_seek(a0));
      }
      break;
    case 106:
      HASH_GUARD(0x0F9EDEC32565D86ALL, getgroup) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getgroup", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getgroup());
      }
      HASH_GUARD(0x6615B5496D03A6EALL, getsize) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getsize", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getsize());
      }
      HASH_GUARD(0x1670096FDE27AF6ALL, rewind) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("directoryiterator::rewind", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_rewind());
      }
      break;
    case 116:
      HASH_GUARD(0x265BDC54C992EE74LL, getmtime) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getmtime", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getmtime());
      }
      HASH_GUARD(0x08D1EA51B78DA5F4LL, isdot) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("directoryiterator::isdot", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isdot());
      }
      break;
    case 120:
      HASH_GUARD(0x25070641C3D924F8LL, getpathname) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getpathname", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getpathname());
      }
      break;
    case 122:
      HASH_GUARD(0x3786834B2A0CCB7ALL, isexecutable) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::isexecutable", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_isexecutable());
      }
      break;
    case 125:
      HASH_GUARD(0x4351578037A06E7DLL, getperms) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("splfileinfo::getperms", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getperms());
      }
      break;
    default:
      break;
  }
  return c_splfileinfo::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_directoryiterator::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  return c_splfileinfo::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
struct ObjectStaticCallbacks cw_directoryiterator = {
  c_directoryiterator::os_getInit,
  c_directoryiterator::os_get,
  c_directoryiterator::os_lval,
  c_directoryiterator::os_invoke,
  c_directoryiterator::os_constant,
};
void c_directoryiterator::init() {
  c_splfileinfo::init();
}
/* SRC: classes/iterator.php line 172 */
void c_directoryiterator::t___construct(Variant v_path) {
  INSTANCE_METHOD_INJECTION(DirectoryIterator, DirectoryIterator::__construct);
  bool oldInCtor = gasInCtor(true);
  x_hphp_directoryiterator___construct(GET_THIS(), toString(v_path));
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/iterator.php line 176 */
Variant c_directoryiterator::t_current() {
  INSTANCE_METHOD_INJECTION(DirectoryIterator, DirectoryIterator::current);
  return x_hphp_directoryiterator_current(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 180 */
Variant c_directoryiterator::t_key() {
  INSTANCE_METHOD_INJECTION(DirectoryIterator, DirectoryIterator::key);
  return x_hphp_directoryiterator_key(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 184 */
Variant c_directoryiterator::t_next() {
  INSTANCE_METHOD_INJECTION(DirectoryIterator, DirectoryIterator::next);
  return (x_hphp_directoryiterator_next(GET_THIS()), null);
} /* function */
/* SRC: classes/iterator.php line 188 */
Variant c_directoryiterator::t_rewind() {
  INSTANCE_METHOD_INJECTION(DirectoryIterator, DirectoryIterator::rewind);
  return (x_hphp_directoryiterator_rewind(GET_THIS()), null);
} /* function */
/* SRC: classes/iterator.php line 192 */
Variant c_directoryiterator::t_seek(CVarRef v_position) {
  INSTANCE_METHOD_INJECTION(DirectoryIterator, DirectoryIterator::seek);
  return (x_hphp_directoryiterator_seek(GET_THIS(), toInt64(v_position)), null);
} /* function */
/* SRC: classes/iterator.php line 196 */
String c_directoryiterator::t___tostring() {
  INSTANCE_METHOD_INJECTION(DirectoryIterator, DirectoryIterator::__toString);
  return x_hphp_directoryiterator___tostring(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 200 */
bool c_directoryiterator::t_valid() {
  INSTANCE_METHOD_INJECTION(DirectoryIterator, DirectoryIterator::valid);
  return x_hphp_directoryiterator_valid(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 204 */
bool c_directoryiterator::t_isdot() {
  INSTANCE_METHOD_INJECTION(DirectoryIterator, DirectoryIterator::isDot);
  return x_hphp_directoryiterator_isdot(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 28 */
const int64 q_recursiveiteratoriterator_LEAVES_ONLY = 0LL;
const int64 q_recursiveiteratoriterator_SELF_FIRST = 1LL;
const int64 q_recursiveiteratoriterator_CHILD_FIRST = 2LL;
const int64 q_recursiveiteratoriterator_CATCH_GET_CHILD = 16LL;
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_recursiveiteratoriterator
Variant c_recursiveiteratoriterator::os_getInit(const char *s, int64 hash) {
  return c_ObjectData::os_getInit(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_recursiveiteratoriterator
Variant c_recursiveiteratoriterator::os_get(const char *s, int64 hash) {
  return c_ObjectData::os_get(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_recursiveiteratoriterator
Variant &c_recursiveiteratoriterator::os_lval(const char *s, int64 hash) {
  return c_ObjectData::os_lval(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_recursiveiteratoriterator
void c_recursiveiteratoriterator::o_get(Array &props) const {
  c_ObjectData::o_get(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_get_recursiveiteratoriterator
Variant c_recursiveiteratoriterator::o_get(CStrRef prop, int64 phash, bool error /* = true */, const char *context /* = NULL */) {
  return c_recursiveiteratoriterator::o_getPublic(prop, phash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_get_PUBLIC_recursiveiteratoriterator
Variant c_recursiveiteratoriterator::o_getPublic(CStrRef s, int64 hash, bool error /* = true */) {
  return c_ObjectData::o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PUBLIC_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_get_PRIVATE_recursiveiteratoriterator
Variant c_recursiveiteratoriterator::o_getPrivate(CStrRef s, int64 hash, bool error /* = true */) {
  return o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_recursiveiteratoriterator
bool c_recursiveiteratoriterator::o_exists(CStrRef prop, int64 phash, const char *context /* = NULL */) const {
  return c_recursiveiteratoriterator::o_existsPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_recursiveiteratoriterator
bool c_recursiveiteratoriterator::o_existsPublic(CStrRef s, int64 hash) const {
  return c_ObjectData::o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_recursiveiteratoriterator
bool c_recursiveiteratoriterator::o_existsPrivate(CStrRef s, int64 hash) const {
  return o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_set_recursiveiteratoriterator
Variant c_recursiveiteratoriterator::o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit /* = false */, const char *context /* = NULL */) {
  return c_recursiveiteratoriterator::o_setPublic(prop, phash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_set_PUBLIC_recursiveiteratoriterator
Variant c_recursiveiteratoriterator::o_setPublic(CStrRef s, int64 hash, CVarRef v, bool forInit /* = false */) {
  return c_ObjectData::o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PUBLIC_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_set_PRIVATE_recursiveiteratoriterator
Variant c_recursiveiteratoriterator::o_setPrivate(CStrRef s, int64 hash, CVarRef v, bool forInit /* = false */) {
  return o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PRIVATE_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_recursiveiteratoriterator
Variant& c_recursiveiteratoriterator::o_lval(CStrRef prop, int64 phash, const char *context /* = NULL */) {
  return c_recursiveiteratoriterator::o_lvalPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_recursiveiteratoriterator
Variant& c_recursiveiteratoriterator::o_lvalPublic(CStrRef s, int64 hash) {
  return c_ObjectData::o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_recursiveiteratoriterator
Variant& c_recursiveiteratoriterator::o_lvalPrivate(CStrRef s, int64 hash) {
  return o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_recursiveiteratoriterator
Variant c_recursiveiteratoriterator::os_constant(const char *s) {
  int64 hash = hash_string(s);
  switch (hash & 7) {
    case 0:
      HASH_RETURN(0x091F3C8504F1CEF8LL, q_recursiveiteratoriterator_CHILD_FIRST, CHILD_FIRST);
      break;
    case 4:
      HASH_RETURN(0x7F32D13555645AA4LL, q_recursiveiteratoriterator_CATCH_GET_CHILD, CATCH_GET_CHILD);
      break;
    case 5:
      HASH_RETURN(0x3FB1062DAE470035LL, q_recursiveiteratoriterator_LEAVES_ONLY, LEAVES_ONLY);
      break;
    case 6:
      HASH_RETURN(0x608F4462FEA8F3DELL, q_recursiveiteratoriterator_SELF_FIRST, SELF_FIRST);
      break;
    default:
      break;
  }
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_recursiveiteratoriterator
IMPLEMENT_CLASS(recursiveiteratoriterator)
c_recursiveiteratoriterator *c_recursiveiteratoriterator::create(Variant v_iterator, Variant v_mode //  = 0LL /* recursiveiteratoriterator::LEAVES_ONLY */
, Variant v_flags //  = 0LL
) {
  CountableHelper h(this);
  init();
  t___construct(v_iterator, v_mode, v_flags);
  return this;
}
ObjectData *c_recursiveiteratoriterator::dynCreate(CArrRef params, bool construct /* = true */) {
  init();
  if (construct) {
    CountableHelper h(this);
    int count __attribute__((__unused__)) = params.size();
    if (count < 1 || count > 3) throw_wrong_arguments("recursiveiteratoriterator::__construct", count, 1, 3, 2);
    if (count <= 1) (t___construct(params[0]));
    else if (count == 2) (t___construct(params[0], params[1]));
    else (t___construct(params[0], params[1], params[2]));
  }
  return this;
}
void c_recursiveiteratoriterator::dynConstruct(CArrRef params) {
  int count __attribute__((__unused__)) = params.size();
  if (count < 1 || count > 3) throw_wrong_arguments("recursiveiteratoriterator::__construct", count, 1, 3, 2);
  if (count <= 1) (t___construct(params[0]));
  else if (count == 2) (t___construct(params[0], params[1]));
  else (t___construct(params[0], params[1], params[2]));
}
void c_recursiveiteratoriterator::dynConstructFromEval(Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller) {
  Variant a0;
  Variant a1;
  Variant a2;
  const std::vector<Eval::ExpressionPtr> &params = caller->params();
  int count __attribute__((__unused__)) = params.size();
  if (count < 1 || count > 3) throw_wrong_arguments("recursiveiteratoriterator::__construct", count, 1, 3, 1);
  std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
  do {
    if (it == params.end()) break;
    a0 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a1 = (*it)->eval(env);
    it++;
    if (it == params.end()) break;
    a2 = (*it)->eval(env);
    it++;
  } while(false);
  for (; it != params.end(); ++it) {
    (*it)->eval(env);
  }
  if (count <= 1) (t___construct(a0), null);
  else if (count == 2) (t___construct(a0, a1), null);
  else (t___construct(a0, a1, a2), null);
}
ObjectData *c_recursiveiteratoriterator::cloneImpl() {
  c_recursiveiteratoriterator *obj = NEW(c_recursiveiteratoriterator)();
  cloneSet(obj);
  return obj;
}
void c_recursiveiteratoriterator::cloneSet(c_recursiveiteratoriterator *clone) {
  ObjectData::cloneSet(clone);
}
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_recursiveiteratoriterator
Variant c_recursiveiteratoriterator::o_invoke(const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 15) {
    case 1:
      HASH_GUARD(0x56EDB60C824E8C51LL, key) {
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::key", 0, 1);
        return (t_key());
      }
      break;
    case 4:
      HASH_GUARD(0x6413CB5154808C44LL, valid) {
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::valid", 0, 1);
        return (t_valid());
      }
      HASH_GUARD(0x3106F858B09C7424LL, getinneriterator) {
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::getinneriterator", 0, 1);
        return (t_getinneriterator());
      }
      break;
    case 8:
      HASH_GUARD(0x3C6D50F3BB8102B8LL, next) {
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::next", 0, 1);
        return (t_next());
      }
      break;
    case 10:
      HASH_GUARD(0x1670096FDE27AF6ALL, rewind) {
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::rewind", 0, 1);
        return (t_rewind());
      }
      break;
    case 12:
      HASH_GUARD(0x5B3A4A72846B21DCLL, current) {
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::current", 0, 1);
        return (t_current());
      }
      break;
    case 15:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count < 1 || count > 3) return throw_wrong_arguments("recursiveiteratoriterator::__construct", count, 1, 3, 2);
        if (count <= 1) return (t___construct(params[0]), null);
        if (count == 2) return (t___construct(params[0], params[1]), null);
        return (t___construct(params[0], params[1], params[2]), null);
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke(s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_recursiveiteratoriterator
Variant c_recursiveiteratoriterator::o_invoke_few_args(const char *s, int64 hash, int count, CVarRef a0, CVarRef a1, CVarRef a2, CVarRef a3, CVarRef a4, CVarRef a5) {
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 15) {
    case 1:
      HASH_GUARD(0x56EDB60C824E8C51LL, key) {
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::key", 0, 1);
        return (t_key());
      }
      break;
    case 4:
      HASH_GUARD(0x6413CB5154808C44LL, valid) {
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::valid", 0, 1);
        return (t_valid());
      }
      HASH_GUARD(0x3106F858B09C7424LL, getinneriterator) {
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::getinneriterator", 0, 1);
        return (t_getinneriterator());
      }
      break;
    case 8:
      HASH_GUARD(0x3C6D50F3BB8102B8LL, next) {
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::next", 0, 1);
        return (t_next());
      }
      break;
    case 10:
      HASH_GUARD(0x1670096FDE27AF6ALL, rewind) {
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::rewind", 0, 1);
        return (t_rewind());
      }
      break;
    case 12:
      HASH_GUARD(0x5B3A4A72846B21DCLL, current) {
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::current", 0, 1);
        return (t_current());
      }
      break;
    case 15:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        if (count < 1 || count > 3) return throw_wrong_arguments("recursiveiteratoriterator::__construct", count, 1, 3, 2);
        if (count <= 1) return (t___construct(a0), null);
        if (count == 2) return (t___construct(a0, a1), null);
        return (t___construct(a0, a1, a2), null);
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke_few_args(s, hash, count, a0, a1, a2, a3, a4, a5);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_recursiveiteratoriterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_recursiveiteratoriterator
Variant c_recursiveiteratoriterator::os_invoke(const char *c, const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
  return c_ObjectData::os_invoke(c, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_recursiveiteratoriterator
Variant c_recursiveiteratoriterator::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  if (hash < 0) hash = hash_string_i(s);
  switch (hash & 15) {
    case 1:
      HASH_GUARD(0x56EDB60C824E8C51LL, key) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::key", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_key());
      }
      break;
    case 4:
      HASH_GUARD(0x6413CB5154808C44LL, valid) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::valid", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_valid());
      }
      HASH_GUARD(0x3106F858B09C7424LL, getinneriterator) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::getinneriterator", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_getinneriterator());
      }
      break;
    case 8:
      HASH_GUARD(0x3C6D50F3BB8102B8LL, next) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::next", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_next());
      }
      break;
    case 10:
      HASH_GUARD(0x1670096FDE27AF6ALL, rewind) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::rewind", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_rewind());
      }
      break;
    case 12:
      HASH_GUARD(0x5B3A4A72846B21DCLL, current) {
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count > 0) return throw_toomany_arguments("recursiveiteratoriterator::current", 0, 1);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        return (t_current());
      }
      break;
    case 15:
      HASH_GUARD(0x0D31D0AC229C615FLL, __construct) {
        Variant a0;
        Variant a1;
        Variant a2;
        const std::vector<Eval::ExpressionPtr> &params = caller->params();
        int count __attribute__((__unused__)) = params.size();
        if (count < 1 || count > 3) return throw_wrong_arguments("recursiveiteratoriterator::__construct", count, 1, 3, 2);
        std::vector<Eval::ExpressionPtr>::const_iterator it = params.begin();
        do {
          if (it == params.end()) break;
          a0 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a1 = (*it)->eval(env);
          it++;
          if (it == params.end()) break;
          a2 = (*it)->eval(env);
          it++;
        } while(false);
        for (; it != params.end(); ++it) {
          (*it)->eval(env);
        }
        if (count <= 1) return (t___construct(a0), null);
        else if (count == 2) return (t___construct(a0, a1), null);
        else return (t___construct(a0, a1, a2), null);
      }
      break;
    default:
      break;
  }
  return c_ObjectData::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_recursiveiteratoriterator::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  return c_ObjectData::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
struct ObjectStaticCallbacks cw_recursiveiteratoriterator = {
  c_recursiveiteratoriterator::os_getInit,
  c_recursiveiteratoriterator::os_get,
  c_recursiveiteratoriterator::os_lval,
  c_recursiveiteratoriterator::os_invoke,
  c_recursiveiteratoriterator::os_constant,
};
void c_recursiveiteratoriterator::init() {
}
/* SRC: classes/iterator.php line 35 */
void c_recursiveiteratoriterator::t___construct(Variant v_iterator, Variant v_mode //  = 0LL /* recursiveiteratoriterator::LEAVES_ONLY */
, Variant v_flags //  = 0LL
) {
  INSTANCE_METHOD_INJECTION(RecursiveIteratorIterator, RecursiveIteratorIterator::__construct);
  bool oldInCtor = gasInCtor(true);
  x_hphp_recursiveiteratoriterator___construct(GET_THIS(), toObject(v_iterator), toInt64(v_mode), toInt64(v_flags));
  gasInCtor(oldInCtor);
} /* function */
/* SRC: classes/iterator.php line 40 */
Object c_recursiveiteratoriterator::t_getinneriterator() {
  INSTANCE_METHOD_INJECTION(RecursiveIteratorIterator, RecursiveIteratorIterator::getInnerIterator);
  return x_hphp_recursiveiteratoriterator_getinneriterator(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 43 */
Variant c_recursiveiteratoriterator::t_current() {
  INSTANCE_METHOD_INJECTION(RecursiveIteratorIterator, RecursiveIteratorIterator::current);
  return x_hphp_recursiveiteratoriterator_current(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 46 */
Variant c_recursiveiteratoriterator::t_key() {
  INSTANCE_METHOD_INJECTION(RecursiveIteratorIterator, RecursiveIteratorIterator::key);
  return x_hphp_recursiveiteratoriterator_key(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 49 */
Variant c_recursiveiteratoriterator::t_next() {
  INSTANCE_METHOD_INJECTION(RecursiveIteratorIterator, RecursiveIteratorIterator::next);
  return (x_hphp_recursiveiteratoriterator_next(GET_THIS()), null);
} /* function */
/* SRC: classes/iterator.php line 52 */
Variant c_recursiveiteratoriterator::t_rewind() {
  INSTANCE_METHOD_INJECTION(RecursiveIteratorIterator, RecursiveIteratorIterator::rewind);
  return (x_hphp_recursiveiteratoriterator_rewind(GET_THIS()), null);
} /* function */
/* SRC: classes/iterator.php line 55 */
bool c_recursiveiteratoriterator::t_valid() {
  INSTANCE_METHOD_INJECTION(RecursiveIteratorIterator, RecursiveIteratorIterator::valid);
  return x_hphp_recursiveiteratoriterator_valid(GET_THIS());
} /* function */
/* SRC: classes/iterator.php line 268 */
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_filteriterator
Variant c_filteriterator::os_getInit(const char *s, int64 hash) {
  return c_ObjectData::os_getInit(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GETINIT_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_GET_filteriterator
Variant c_filteriterator::os_get(const char *s, int64 hash) {
  return c_ObjectData::os_get(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_GET_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_filteriterator
Variant &c_filteriterator::os_lval(const char *s, int64 hash) {
  return c_ObjectData::os_lval(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_LVAL_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_GETARRAY_filteriterator
void c_filteriterator::o_get(Array &props) const {
  c_ObjectData::o_get(props);
}
#endif // OMIT_JUMP_TABLE_CLASS_GETARRAY_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_get_filteriterator
Variant c_filteriterator::o_get(CStrRef prop, int64 phash, bool error /* = true */, const char *context /* = NULL */) {
  return c_filteriterator::o_getPublic(prop, phash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_get_PUBLIC_filteriterator
Variant c_filteriterator::o_getPublic(CStrRef s, int64 hash, bool error /* = true */) {
  return c_ObjectData::o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PUBLIC_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_get_PRIVATE_filteriterator
Variant c_filteriterator::o_getPrivate(CStrRef s, int64 hash, bool error /* = true */) {
  return o_getPublic(s, hash, error);
}
#endif // OMIT_JUMP_TABLE_CLASS_get_PRIVATE_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_filteriterator
bool c_filteriterator::o_exists(CStrRef prop, int64 phash, const char *context /* = NULL */) const {
  return c_filteriterator::o_existsPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_filteriterator
bool c_filteriterator::o_existsPublic(CStrRef s, int64 hash) const {
  return c_ObjectData::o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PUBLIC_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_filteriterator
bool c_filteriterator::o_existsPrivate(CStrRef s, int64 hash) const {
  return o_existsPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_exists_PRIVATE_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_set_filteriterator
Variant c_filteriterator::o_set(CStrRef prop, int64 phash, CVarRef v, bool forInit /* = false */, const char *context /* = NULL */) {
  return c_filteriterator::o_setPublic(prop, phash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_set_PUBLIC_filteriterator
Variant c_filteriterator::o_setPublic(CStrRef s, int64 hash, CVarRef v, bool forInit /* = false */) {
  return c_ObjectData::o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PUBLIC_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_set_PRIVATE_filteriterator
Variant c_filteriterator::o_setPrivate(CStrRef s, int64 hash, CVarRef v, bool forInit /* = false */) {
  return o_setPublic(s, hash, v, forInit);
}
#endif // OMIT_JUMP_TABLE_CLASS_set_PRIVATE_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_filteriterator
Variant& c_filteriterator::o_lval(CStrRef prop, int64 phash, const char *context /* = NULL */) {
  return c_filteriterator::o_lvalPublic(prop, phash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_filteriterator
Variant& c_filteriterator::o_lvalPublic(CStrRef s, int64 hash) {
  return c_ObjectData::o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PUBLIC_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_filteriterator
Variant& c_filteriterator::o_lvalPrivate(CStrRef s, int64 hash) {
  return o_lvalPublic(s, hash);
}
#endif // OMIT_JUMP_TABLE_CLASS_lval_PRIVATE_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_CONSTANT_filteriterator
Variant c_filteriterator::os_constant(const char *s) {
  return c_ObjectData::os_constant(s);
}
#endif // OMIT_JUMP_TABLE_CLASS_CONSTANT_filteriterator
IMPLEMENT_CLASS(filteriterator)
ObjectData *c_filteriterator::cloneImpl() {
  c_filteriterator *obj = NEW(c_filteriterator)();
  cloneSet(obj);
  return obj;
}
void c_filteriterator::cloneSet(c_filteriterator *clone) {
  ObjectData::cloneSet(clone);
}
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_filteriterator
Variant c_filteriterator::o_invoke(const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
  return c_ObjectData::o_invoke(s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_INVOKE_filteriterator
Variant c_filteriterator::o_invoke_few_args(const char *s, int64 hash, int count, CVarRef a0, CVarRef a1, CVarRef a2, CVarRef a3, CVarRef a4, CVarRef a5) {
  return c_ObjectData::o_invoke_few_args(s, hash, count, a0, a1, a2, a3, a4, a5);
}
#endif // OMIT_JUMP_TABLE_CLASS_INVOKE_filteriterator
#ifndef OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_filteriterator
Variant c_filteriterator::os_invoke(const char *c, const char *s, CArrRef params, int64 hash, bool fatal) {
  int count __attribute__((__unused__)) = params.size();
  return c_ObjectData::os_invoke(c, s, params, hash, fatal);
}
#endif // OMIT_JUMP_TABLE_CLASS_STATIC_INVOKE_filteriterator
Variant c_filteriterator::o_invoke_from_eval(const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  return c_ObjectData::o_invoke_from_eval(s, env, caller, hash, fatal);
}
Variant c_filteriterator::os_invoke_from_eval(const char *c, const char *s, Eval::VariableEnvironment &env, const Eval::FunctionCallExpression *caller, int64 hash, bool fatal) {
  return c_ObjectData::os_invoke_from_eval(c, s, env, caller, hash, fatal);
}
struct ObjectStaticCallbacks cw_filteriterator = {
  c_filteriterator::os_getInit,
  c_filteriterator::os_get,
  c_filteriterator::os_lval,
  c_filteriterator::os_invoke,
  c_filteriterator::os_constant,
};
void c_filteriterator::init() {
}
Object co_arrayiterator(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_arrayiterator)())->dynCreate(params, init));
}
Object co_appenditerator(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_appenditerator)())->dynCreate(params, init));
}
Object co_recursivedirectoryiterator(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_recursivedirectoryiterator)())->dynCreate(params, init));
}
Object co_directoryiterator(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_directoryiterator)())->dynCreate(params, init));
}
Object co_recursiveiteratoriterator(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_recursiveiteratoriterator)())->dynCreate(params, init));
}
Object co_filteriterator(CArrRef params, bool init /* = true */) {
  return Object((NEW(c_filteriterator)())->dynCreate(params, init));
}
Variant pm_php$classes$iterator_php(bool incOnce /* = false */, LVariableTable* variables /* = NULL */) {
  {
    DECLARE_SYSTEM_GLOBALS(g);
    bool &alreadyRun = g->run_pm_php$classes$iterator_php;
    if (alreadyRun) { if (incOnce) return true;}
    else alreadyRun = true;
    if (!variables) variables = g;
  }
  PSEUDOMAIN_INJECTION(run_init::classes/iterator.php);
  DECLARE_SYSTEM_GLOBALS(g);
  LVariableTable *gVariables __attribute__((__unused__)) = get_variable_table();
  return true;
} /* function */

///////////////////////////////////////////////////////////////////////////////
}
