/*
   +----------------------------------------------------------------------+
   | HipHop for PHP                                                       |
   +----------------------------------------------------------------------+
   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
   +----------------------------------------------------------------------+
   | This source file is subject to version 3.01 of the PHP license,      |
   | that is bundled with this package in the file LICENSE, and is        |
   | available through the world-wide-web at the following url:           |
   | http://www.php.net/license/3_01.txt                                  |
   | If you did not receive a copy of the PHP license and are unable to   |
   | obtain it through the world-wide-web, please send a note to          |
   | license@php.net so we can mail you a copy immediately.               |
   +----------------------------------------------------------------------+
*/

#ifndef __HPHP_FIBER_H__
#define __HPHP_FIBER_H__

#include <runtime/base/complex_types.h>

namespace HPHP {
///////////////////////////////////////////////////////////////////////////////

class FiberAsyncFunc {
public:
  // These values have to be consistent with what's in system/globals/
  // constants.php, which was generated by bin/gen_constants.php
  enum Strategy {
    GlobalStateIgnore = 0,
    GlobalStateOverwrite = 1,
    GlobalStateSkip = 2,
    GlobalStateResolveConflict = 3,
  };

public:
  static void Restart();

  /**
   * Create an asynchronous function call. This always returns a handle.
   */
  static Object Start(CVarRef function, CArrRef params);

  /**
   * Query if an async call is finished. This is non-blocking and can be
   * called as many times as desired.
   */
  static bool Status(CObjRef func);

  /**
   * Get results of an async call. This is blocking until task is finished.
   */
  static Variant Result(CObjRef func, Strategy strategy, CVarRef resolver);
};

///////////////////////////////////////////////////////////////////////////////

/**
 * Referenced pointer (strongly bound variants and objects) mapping between
 * mother thread and fiber.
 */
class FiberReferenceMap {
public:
  static void *Lookup(void *src);
  static void *ReverseLookup(void *copy);
  static void Insert(void *src, void *copy);
};

///////////////////////////////////////////////////////////////////////////////
}

#endif // __HPHP_FIBER_H__
